package com.metaexploit.diversight.uikit

import android.content.Context
import android.util.AttributeSet
import android.view.ContextThemeWrapper
import android.view.View
import androidx.appcompat.widget.AppCompatTextView
import androidx.core.content.res.ResourcesCompat
import com.metaexploit.diversight.R

class DiverInputDropdownMenu @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : BaseDiverInput(context, attrs, defStyleAttr) {

    private var state: DropdownInputState = DropdownInputState.Default
    set(value) {
        refreshDropdownLayout(value)
        field = value
    }

    private fun refreshDropdownLayout(value: DropdownInputState) {
        when(value) {
            DropdownInputState.Default -> hideItems()
            DropdownInputState.Focused -> showItems()
        }
    }

    private var listItems: List<String> = emptyList()
    set(value) {
        if (value.isNotEmpty()) {
            renderItems(value)
        }
        field = value
    }

    private var selectedItem: Item? = null

    init {
        binding.apply {
            filterClick.apply {
                isClickable = true
                visibility = View.VISIBLE
                setOnClickListener {
                    when(state) {
                        DropdownInputState.Default -> setDropdownMenuFocusedState()
                        DropdownInputState.Focused -> setDropdownMenuDefaultState()
                    }
                }
            }

            editText.apply {
                isEnabled = false
            }

            toggle.apply {
                visibility = View.VISIBLE
                setImageResource(R.drawable.ic_arrow)
            }
        }


    }

    private fun setDropdownMenuDefaultState() {
        state = DropdownInputState.Default
    }

    private fun setDropdownMenuFocusedState() {
        state = DropdownInputState.Focused
    }

    fun setItems(items: List<String>) {
        listItems = items
    }

    private fun showItems() {
        binding.containerItems.visibility = VISIBLE
        binding.editText.background = ResourcesCompat.getDrawable(resources, R.drawable.bg_diver_input_focus, null)
        binding.toggle.setImageResource(R.drawable.ic_arrow_active)
    }

    private fun hideItems() {
        setDropdownMenuFocusedState()
        binding.containerItems.visibility = GONE
        binding.editText.background = ResourcesCompat.getDrawable(resources, R.drawable.bg_diver_input_default, null)
        binding.toggle.setImageResource(R.drawable.ic_arrow)
    }

    private fun renderItems(items: List<String>) {
        for (item in items) {
            val position = items.indexOf(item)
            val newItem = AppCompatTextView(ContextThemeWrapper(context, R.style.InputItem))
            newItem.text = item
            newItem.setOnClickListener {
                renderSelectedItem(item)
                setDropdownMenuDefaultState()
                selectedItem = Item(
                    position,
                    item
                )
            }
            binding.containerItems.addView(newItem)
        }
    }

    private fun renderSelectedItem(text: String) {
        binding.editText.hint = text
    }

    fun getSelectedItem(): Item? {
        return selectedItem
    }

    data class Item(
        val id: Int,
        val text: String
    )

    sealed class DropdownInputState(isFocused: Boolean) {
        object Default : DropdownInputState(isFocused = false)
        object Focused : DropdownInputState(isFocused = true)
    }

}