package com.metaexploit.diversight.uikit

import android.content.Context
import android.util.AttributeSet
import android.view.LayoutInflater
import androidx.appcompat.widget.AppCompatEditText
import androidx.constraintlayout.widget.ConstraintLayout
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.DiverInputBinding

open class BaseDiverInput @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : ConstraintLayout(context, attrs, defStyleAttr) {

    var input: AppCompatEditText? = null

    private var label: String = ""
    private var hint: String = ""
    private var message: String = ""


    private var state: DiverInputState = DiverInputState.InputDefault
    set(value) {
        field = value
        refreshState()
    }

    val binding = DiverInputBinding.inflate(
        LayoutInflater.from(context), this, true
    ).apply {
        input = this.editText
    }

    init {
        setLayout(attrs)
        refreshState()
    }

    private fun refreshState() {
        binding.label.text = label
        binding.editText.hint = hint
        binding.message.text = message
    }

    private fun setLayout(attrs: AttributeSet?) {
        attrs?.let { attributeSet ->
            val attributes = context.obtainStyledAttributes(
                attributeSet,
                R.styleable.BaseDiverInput
            )

            label = attributes.getString(R.styleable.BaseDiverInput_diverLabel) ?: ""
            hint = attributes.getString(R.styleable.BaseDiverInput_diverHint)  ?: ""
            message = attributes.getString(R.styleable.BaseDiverInput_diverMessage)  ?: ""

            attributes.recycle()
        }
    }

    sealed class DiverInputState(
        val isEnabled: Boolean
    ) {
        object InputDefault : DiverInputState(
            isEnabled = true
        )
    }



}