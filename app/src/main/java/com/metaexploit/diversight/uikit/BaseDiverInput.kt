package com.metaexploit.diversight.uikit

import android.content.Context
import android.util.AttributeSet
import android.view.LayoutInflater
import androidx.appcompat.widget.AppCompatEditText
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.widget.doOnTextChanged
import com.metaexploit.diversight.R
import com.metaexploit.diversight.commons.getCompatColor
import com.metaexploit.diversight.commons.getCompatDrawable
import com.metaexploit.diversight.commons.getVisibility
import com.metaexploit.diversight.databinding.DiverInputBinding

open class BaseDiverInput @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : ConstraintLayout(context, attrs, defStyleAttr) {

    var input: AppCompatEditText? = null

    private var label: String = ""
    private var newHint: String = ""
    private var message: String = ""

    private var state: DiverInputState = DiverInputState.InputDefault
    set(value) {
        field = value
        refreshState()
    }

    val binding = DiverInputBinding.inflate(
        LayoutInflater.from(context), this, true
    ).apply {
        input = this.editText
    }

    init {
        setLayout(attrs)
        refreshState()
    }

    private fun refreshState() {
        binding.label.text = label
        binding.editText.apply {
            hint = newHint
            background = if (state.isError) {
                context.getCompatDrawable(R.drawable.bg_diver_input_error)
            } else {
                context.getCompatDrawable(R.drawable.bg_diver_input)
            }
            setTextColor(
                if (state.isError) {
                    context.getCompatColor(R.color.red_0)
                } else {
                    context.getCompatColor(R.color.black_text)
                }
            )
            doOnTextChanged { _, _, _, _ ->
                setErrorState(false)
            }
        }
        binding.message.apply {
            text = message
            visibility = getVisibility(state.isError)
            setTextColor(
                if (state.isError) {
                    context.getCompatColor(R.color.red_0)
                } else {
                    context.getCompatColor(R.color.black_text)
                }
            )
        }
    }

    private fun setLayout(attrs: AttributeSet?) {
        attrs?.let { attributeSet ->
            val attributes = context.obtainStyledAttributes(
                attributeSet,
                R.styleable.BaseDiverInput
            )

            label = attributes.getString(R.styleable.BaseDiverInput_diverLabel) ?: ""
            newHint = attributes.getString(R.styleable.BaseDiverInput_diverHint)  ?: ""
            message = attributes.getString(R.styleable.BaseDiverInput_diverMessage)  ?: ""

            attributes.recycle()
        }
    }

    fun setMessage(text: String) {
        binding.message.text = text
    }

    open fun getText(): String {
        return binding.editText.text.toString()
    }

    fun setMessageVisible(visible: Boolean) {
        binding.message.visibility = getVisibility(visible)
    }

    fun setErrorState(active: Boolean) {
        state = if (active) DiverInputState.InputError else DiverInputState.InputDefault
    }

    sealed class DiverInputState(
        val isEnabled: Boolean,
        val isError: Boolean
    ) {
        object InputDefault : DiverInputState(
            isEnabled = true,
            isError = false
        )

        object InputError : DiverInputState(
            isEnabled = true,
            isError = true
        )
    }



}