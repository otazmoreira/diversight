package com.metaexploit.diversight.remote

import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.request.LoginRequest
import com.metaexploit.diversight.remote.response.DataUser
import com.metaexploit.diversight.remote.response.ResponseForm
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import java.util.concurrent.TimeUnit

interface DiversightService {

    @POST("colab_login")
    suspend fun login(
        @Body loginRequest: LoginRequest
    ): Response<User>

    @POST("colab_register")
    suspend fun register(
        @Body user: UserRegister
    ): Response<Unit>

    @GET("forms")
    suspend fun getForm(): Response<List<Form>>

    @POST("resposta_register")
    suspend fun sendForm(
        @Body form: ResponseForm
    )

    @POST("user_update")
    suspend fun updateUser(
        @Body user: DataUser
    ): Response<User>

    companion object {
        fun newInstance(): DiversightService = Retrofit.Builder()
            .baseUrl("http://heroku-diversight.herokuapp.com/")
            .client(getClient())
            .addConverterFactory(GsonConverterFactory.create())
            .build().create(DiversightService::class.java)

        private fun getClient(): OkHttpClient = OkHttpClient.Builder()
            .readTimeout(60, TimeUnit.SECONDS)
            .connectTimeout(60, TimeUnit.SECONDS)
            .addInterceptor(HttpLoggingInterceptor().apply {
                level = HttpLoggingInterceptor.Level.BODY
            }).build()
    }
}