package com.metaexploit.diversight.network

import com.metaexploit.diversight.domain.ResultWrapper
import com.metaexploit.diversight.network.model.User
import com.metaexploit.diversight.network.model.UserRegister
import com.metaexploit.diversight.network.request.Form
import com.metaexploit.diversight.network.request.LoginRequest
import com.metaexploit.diversight.network.response.DataUser
import com.metaexploit.diversight.network.response.ResponseForm
import retrofit2.Response

class NetworkDataSourceImpl(
    private val service: DiversightService
) : NetworkDataSource {
    override suspend fun login(loginRequest: LoginRequest): ResultWrapper<Response<User>> {
        return try {
            ResultWrapper.Success(service.login(loginRequest))
        } catch (throwable: Throwable) {
            ResultWrapper.Failure(throwable)
        }
    }

    override suspend fun registerUser(user: UserRegister): ResultWrapper<Response<Unit>> {
        return try {
            ResultWrapper.Success(service.registerUser(user))
        } catch (throwable: Throwable) {
            ResultWrapper.Failure(throwable)
        }
    }

    override suspend fun getForms(): ResultWrapper<Response<List<Form>>> {
        return try {
            ResultWrapper.Success(service.getForms())
        } catch (throwable: Throwable) {
            ResultWrapper.Failure(throwable)
        }
    }

    override suspend fun sendAnsweredForm(responseForm: ResponseForm): ResultWrapper<Response<Unit>> {
        return try {
            ResultWrapper.Success(service.sendForm(responseForm))
        } catch (throwable: Throwable) {
            ResultWrapper.Failure(throwable)
        }
    }

    override suspend fun updateUser(dataUser: DataUser): ResultWrapper<Response<User>> {
        return try {
            val response = service.updateUser(dataUser)
            if (response.isSuccessful) {
                ResultWrapper.Success(response)
            } else {
                ResultWrapper.Failure(Throwable("Credentials error"))
            }
        } catch (throwable: Throwable) {
            ResultWrapper.Failure(throwable)
        }
    }

}