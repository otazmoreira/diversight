package com.metaexploit.diversight.ui.questions.questions_enterprise

import androidx.fragment.app.FragmentActivity
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.google.android.material.textfield.TextInputLayout
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentQuestionsEnterpriseBinding

class EnterpriseQuestionsViewModel : ViewModel() {

    private val _permission: MutableLiveData<Boolean> = MutableLiveData(false)
    val permission: LiveData<Boolean> = _permission

    private val _toastPermission: MutableLiveData<Boolean> = MutableLiveData(true)
    val toastPermission: LiveData<Boolean> = _toastPermission

    private val _enterprise: MutableLiveData<String> = MutableLiveData()
    val enterprise: LiveData<String> = _enterprise

    private val _occupation: MutableLiveData<String> = MutableLiveData()
    val occupation: LiveData<String> = _occupation

    private val _office: MutableLiveData<String> = MutableLiveData()
    val office: LiveData<String> = _office

    private val _clearFocus: MutableLiveData<Boolean> = MutableLiveData(false)
    val clearFocus: LiveData<Boolean> = _clearFocus

    private fun setEnterprise(text: String) { _enterprise.value = text.lowercase() }
    private fun setOccupation(text: String) { _occupation.value = text.lowercase() }
    private fun setOffice(text: String) { _office.value = text.lowercase() }

    fun setValue(id: Int, value: String, binding: FragmentQuestionsEnterpriseBinding) {
        when (id) {
            binding.edtEnterprise.id -> {
                setEnterprise(value)
            }
            binding.edtOccupation.id -> {
                setOccupation(value)
            }
            else -> {
                setOffice(value)
            }
        }
    }

    fun textIsEmpty(activity: FragmentActivity, editLayout: TextInputLayout) {
        editLayout.editText?.let { edt ->
            val text = edt.text
            if (text.isBlank() || text.toString() == activity.getString(R.string.select)) {
                editLayout.isErrorEnabled = true
                editLayout.error = activity.getString(R.string.empty_input)
            } else {
                editLayout.isErrorEnabled = false
            }
        }
    }

    fun verifyIsEmpty() {
        val list = listOf(enterprise.value, occupation.value, office.value)
        var counter = 0
        for (item in list) {
            if (item == null || item.isBlank()) {
                _toastPermission.value = true
                counter++
            }
        }
        _permission.value = counter <= 0
    }

    fun removePermission() { _permission.value = false }
    fun removeToastPermission() { _toastPermission.value = false }
    fun setClearFocus() { _clearFocus.value = !_clearFocus.value!! }

    fun clearAllFocus(binding: FragmentQuestionsEnterpriseBinding) {
        val list = listOf(
            binding.autoEnterprise,
            binding.autoOccupation,
            binding.autoOffice
        )
        for (item in list) { item.clearFocus() }
    }


}