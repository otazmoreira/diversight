package com.metaexploit.diversight.ui.sign.login

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import androidx.databinding.DataBindingUtil
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentLoginBinding
import com.metaexploit.diversight.ui.main.MainActivity
import org.koin.androidx.viewmodel.ext.android.getViewModel

class LoginFragment : Fragment() {

    private lateinit var binding: FragmentLoginBinding
    private lateinit var viewModel: LoginViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_login, container, false)
        viewModel = getViewModel()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)



        // Login button
        binding.btnLogin.setOnClickListener {
            this.context?.let { it1 -> hideKeyboard(it1, it) }
            activity?.let { activity ->
                viewModel.login(
                    binding.edtEmail.editText?.text.toString(),
                    binding.edtPassword.editText?.text.toString(),
                    activity
                ) {
                    setMainActivity()
                }
            }
        }
    }

    // Start MainActivity
    private fun setMainActivity() {
        val intent = Intent(activity, MainActivity::class.java)
        activity?.startActivity(intent)
    }

    private fun hideKeyboard(context: Context, view: View) {
        val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }
}