package com.metaexploit.diversight.ui.sign.signup.questions_enterprise

import android.os.Bundle
import android.view.ContextThemeWrapper
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AutoCompleteTextView
import androidx.appcompat.widget.AppCompatTextView
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.activityViewModels
import com.google.android.material.textfield.TextInputLayout
import com.metaexploit.diversight.DropDownMenu
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentQuestionsEnterpriseBinding
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel

class EnterpriseQuestionsFragment : Fragment() {

    private lateinit var binding: FragmentQuestionsEnterpriseBinding
    private val viewModel: EnterpriseQuestionsViewModel by activityViewModels()
    private val signupViewModel: SignupViewModel by activityViewModels()

    private var aux = true

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        signupViewModel.setFirstScreen(false)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_questions_enterprise, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val listDropDownMenu = listOf(
            DropDownMenu(
                binding.listEnterprise,
                binding.edtEnterprise,
                binding.autoEnterprise,
                items = arrayOf("Ioasys", "Havaianas", "Minuzo")
            ),
            DropDownMenu(
                binding.listOccupation,
                binding.edtOccupation,
                binding.autoOccupation,
                items = arrayOf("Administrativo", "Atendimento ao cliente", "Comercial", "Data Science", "Desenvolvimento", "Financeiro", "Infraestrutura e Segurança de T.I.", "Inteligência de dados e Projetos", "Jurídico", "Localização e Tradução", "Marketing", "Produtos", "Recursos Humanos", "Riscos e compliance")
            ),
            DropDownMenu(
                binding.listOffice,
                binding.edtOffice,
                binding.autoOffice,
                items = arrayOf("Estágio", "Assistente", "Trainee", "Analista", "Gerente", "Coordenação", "Direção")
            )
        )
        setDropDownAdapters(listDropDownMenu)

        binding
    }

    // Adapter ao dropdown menu
    private fun setPersonalDropDown(
        list: LinearLayoutCompat? = null,
        b: Boolean,
        auto: AutoCompleteTextView? = null,
        items: Array<String>? = null,
        edt: TextInputLayout? = null
    ) {
        if (b) {
            list?.visibility = View.VISIBLE
            list?.removeAllViews()
            edt?.isErrorEnabled = false
            for (item in items!!) {
                this.context?.let { context ->
                    val textView =
                        AppCompatTextView(ContextThemeWrapper(context, R.style.InputItem))
                    textView.text = item
                    textView.setOnClickListener {
                        setPersonalDropDown(list = list, b = false)
                        auto?.setText(item)
                        edt?.clearFocus()
                    }
                    list?.addView(textView)

                }
            }
            aux = !b
        } else {
            list?.removeAllViews()
            list?.visibility = View.GONE
            aux = !b
        }
    }

    // Adiciona adapter em todos os menus
    private fun setDropDownAdapters(listDropDownMenu: List<DropDownMenu>) {
        for (dropMenu in listDropDownMenu) {
            // Quando menu tem o foco, inicia o adapter. Quando não, desativa.
            dropMenu.autoComplete.setOnFocusChangeListener { _, hasFocus ->
                if (hasFocus) {
                    setPersonalDropDown(
                        dropMenu.linearLayout,
                        true,
                        dropMenu.autoComplete,
                        dropMenu.items,
                        dropMenu.textInputLayout
                    )
                } else {
                    activity?.let { viewModel.textIsEmpty(it, dropMenu.textInputLayout) }
                    viewModel.setValue(dropMenu.textInputLayout.id, dropMenu.autoComplete.text.toString(), binding)
                    setPersonalDropDown(dropMenu.linearLayout, b = false)
                }
            }

            // Quando clicar no menu, mesmo que ele esteja em foco vai ser ativado e desativado
            dropMenu.autoComplete.setOnClickListener {
                setPersonalDropDown(
                    dropMenu.linearLayout,
                    aux,
                    dropMenu.autoComplete,
                    dropMenu.items,
                    dropMenu.textInputLayout
                )
            }

        }
    }

}