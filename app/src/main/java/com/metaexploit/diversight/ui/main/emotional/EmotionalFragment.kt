package com.metaexploit.diversight.ui.main.emotional

import android.graphics.drawable.Drawable
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.Toast
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.core.content.res.ResourcesCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentEmotionalBinding
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.request.FormQuestion
import com.metaexploit.diversight.remote.request.FormQuestionOption
import com.metaexploit.diversight.ui.main.Header
import com.metaexploit.diversight.ui.main.MainViewModel

class EmotionalFragment : Fragment() {

    private lateinit var binding: FragmentEmotionalBinding
    private val args: EmotionalFragmentArgs by navArgs()
    private val mainViewModel: MainViewModel by activityViewModels()
    private var emoticonSelect: Int = 0

    data class Emoticon(
        val id: Int,
        val root: LinearLayoutCompat,
        val imageView: ImageView,
        val imageOn: Int,
        val imageOff: Int,
        var selected: Boolean
    )

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_emotional, container, false)
        mainViewModel.setVisibilityBN(false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val form = Gson().fromJson(args.form, Form::class.java)


        configureScreen(form)
        setEmoticonFunction()
    }

    private fun setEmoticonFunction() {
        val listEmoticon = listOf(
            Emoticon(
                1,
                binding.emVerySad,
                binding.imageEmVerySad,
                R.drawable.ic_very_sad_on,
                R.drawable.ic_very_sad_off,
                false
            ),
            Emoticon(
                2,
                binding.emSad,
                binding.imageEmSad,
                R.drawable.ic_sad_on,
                R.drawable.ic_sad_off,
                false
            ),
            Emoticon(
                3,
                binding.emNeutral,
                binding.imageEmNeutral,
                R.drawable.ic_neutral_on,
                R.drawable.ic_neutral_off,
                false
            ),
            Emoticon(
                4,
                binding.emHappy,
                binding.imageEmHappy,
                R.drawable.ic_happy_on,
                R.drawable.ic_happy_off,
                false
            ),
            Emoticon(
                5,
                binding.emVeryHappy,
                binding.imageEmVeryHappy,
                R.drawable.ic_very_happy_on,
                R.drawable.ic_very_happy_off,
                false
            )
        )
        for (emoticon in listEmoticon) {
            emoticon.root.setOnClickListener {
                if (!emoticon.selected) {
                    emoticonSelect = emoticon.id
                    emoticon.imageView.background =
                        ResourcesCompat.getDrawable(resources, emoticon.imageOn, null)
                    disableOthersEmoticons(emoticon.root.id, listEmoticon)
                    emoticon.selected = true
                } else {
                    emoticonSelect = 0
                    emoticon.imageView.background =
                        ResourcesCompat.getDrawable(resources, emoticon.imageOff, null)
                    emoticon.selected = false
                }

            }
        }
    }

    private fun disableOthersEmoticons(id: Int, listEmoticon: List<Emoticon>) {
        for (emoticon in listEmoticon) {
            if (emoticon.root.id != id) {
                emoticon.imageView.background =
                    ResourcesCompat.getDrawable(resources, emoticon.imageOff, null)
                emoticon.selected = false
            }
        }
    }

    private fun configureScreen(form: Form) {
        binding.date.text = form.date

        binding.apply {
            binding.header = Header(
                when (form.type) {
                    "diaria" -> {
                        getString(
                            R.string.title_emotional_header,
                            getString(R.string.daily).lowercase()
                        )
                    }
                    else -> {
                        getString(
                            R.string.title_emotional_header,
                            getString(R.string.weekly).lowercase()
                        )
                    }
                }
            )
            binding.question = Question(
                when (form.type) {
                    "diaria" -> {
                        getString(R.string.question_enunciated, "hoje")
                    }
                    else -> {
                        getString(R.string.question_enunciated, "esta semana")
                    }
                },
                form.date ?: ""
            )
        }

        binding.btnBack.setOnClickListener { this.findNavController().popBackStack() }

        binding.btnSend.setOnClickListener {
            if (emoticonSelect != 0) {
                this.findNavController().navigate(
                    EmotionalFragmentDirections.actionEmotionalFragmentToDoneFragment(args.form)
                )
            } else {
                Toast.makeText(activity, getString(R.string.select_emoticon), Toast.LENGTH_SHORT).show()
            }
        }
    }
}