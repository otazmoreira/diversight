package com.metaexploit.diversight.ui.sign.signup

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.navigation.findNavController
import androidx.navigation.fragment.findNavController
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentSignupBinding
import com.metaexploit.diversight.remote.DiversightService
import com.metaexploit.diversight.remote.UserRegister
import com.metaexploit.diversight.ui.sign.SignViewModel
import com.metaexploit.diversight.ui.sign.signup.email.SignEmailViewModel
import com.metaexploit.diversight.ui.sign.signup.password.SignPasswordViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_enterprise.EnterpriseQuestionsViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_user.UserQuestionsViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.Response

class SignupFragment : Fragment() {

    private lateinit var binding: FragmentSignupBinding
    private val signActivityViewModel: SignViewModel by activityViewModels()
    private val viewModel: SignupViewModel by activityViewModels()
    private val userQuestionsViewModel: UserQuestionsViewModel by activityViewModels()
    private val enterpriseQuestionsViewModel: EnterpriseQuestionsViewModel by activityViewModels()
    private val emailSignupViewModel: SignEmailViewModel by activityViewModels()
    private val passwordSignupViewModel: SignPasswordViewModel by activityViewModels()
    private var currentScreen = 0

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_signup, container, false)
        signActivityViewModel.setBackPermission()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val progressObserver = Observer<Int> {
            binding.progressBar.progress = it
        }
        viewModel.progress.observe(viewLifecycleOwner, progressObserver)

        val readyObserver = Observer<Boolean> {
            if (it) {
                CoroutineScope(Dispatchers.IO).launch {
                    val response = DiversightService.newInstance().register(
                        UserRegister(
                            userQuestionsViewModel.name.value ?: "",
                            userQuestionsViewModel.skin.value ?: "",
                            userQuestionsViewModel.sex.value ?: "",
                            userQuestionsViewModel.gender.value ?: "",
                            userQuestionsViewModel.birthday.value ?: "",
                            userQuestionsViewModel.pcd.value ?: false,
                            userQuestionsViewModel.pcdVisual.value ?: false,
                            userQuestionsViewModel.pcdPhysical.value ?: false,
                            userQuestionsViewModel.pcdHearing.value ?: false,
                            userQuestionsViewModel.pcdIntellectual.value ?: false,
                            userQuestionsViewModel.pcdPsychosocial.value ?: false,
                            userQuestionsViewModel.pcdReadapted.value ?: false,
                            enterpriseQuestionsViewModel.enterprise.value ?: "",
                            enterpriseQuestionsViewModel.occupation.value ?: "",
                            enterpriseQuestionsViewModel.office.value ?: "",
                            emailSignupViewModel.email.value ?: "",
                            passwordSignupViewModel.password.value ?: "",
                        )
                    )

                    CoroutineScope(Dispatchers.Main).launch {
                        signActivityViewModel.setLoading()
                        handleResponse(response)
                    }
                }

                viewModel.setReady(false)
            }
        }
        viewModel.ready.observe(viewLifecycleOwner, readyObserver)

        var isFirstScreen = true
        val isFirstScreenObserver = Observer<Boolean> {
            isFirstScreen = it
        }
        viewModel.firstScreen.observe(viewLifecycleOwner, isFirstScreenObserver)
        // Back button
        binding.btnBack.setOnClickListener {
            if (isFirstScreen) {
                this.findNavController().navigate(
                    SignupFragmentDirections.actionSignupFragmentToLoginFragment()
                )
            } else {
                binding.signupContainer.findNavController().popBackStack()
            }
        }


    }

    private fun handleResponse(response: Response<Unit>) {
        if (response.isSuccessful) {
            Toast.makeText(activity, getString(R.string.signup_complete), Toast.LENGTH_LONG).show()
            this.findNavController().navigate(
                SignupFragmentDirections.actionSignupFragmentToLoginFragment()
            )
        }
    }
}