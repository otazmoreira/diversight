package com.metaexploit.diversight.ui.main

import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.WindowInsetsControllerCompat
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.Observer
import androidx.navigation.findNavController
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.ActivityMainBinding
import org.koin.androidx.viewmodel.ext.android.getViewModel
import timber.log.Timber

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var viewModel: MainViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)

        configureWindow()
        setBottomNavigation()
        setViewModel()
        setObserver()
    }

    private fun configureWindow() {
        this.window.statusBarColor = this.getColor(R.color.blue_0)
        this.window.navigationBarColor = this.getColor(R.color.white)

        val winController = WindowInsetsControllerCompat(window, binding.root)
        winController.isAppearanceLightStatusBars = false
        winController.isAppearanceLightNavigationBars = true
    }

    private fun setBottomNavigation() {
        binding.bottomNavigationView.setOnItemSelectedListener { item ->
            when(item.itemId) {
                R.id.userMenu -> {
                    this.findNavController(R.id.fgContainerView).navigate(R.id.userFragment)
                    true
                }
                R.id.homeMenu -> {
                    this.findNavController(R.id.fgContainerView).navigate(R.id.homeFragment)
                    true
                }
                else -> false
            }
        }
    }

    private fun setViewModel() {
        viewModel = getViewModel()
    }

    private fun setObserver() {
        val observer = Observer<Boolean> { b ->
            binding.bottomNavigationView.visibility = if (b) View.VISIBLE else View.GONE
        }
        viewModel.visibilityBN.observe(this, observer)
    }
}