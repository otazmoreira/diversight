package com.metaexploit.diversight.ui.main

import android.content.Context
import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.WindowInsetsControllerCompat
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.Observer
import androidx.navigation.findNavController
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.ActivityMainBinding
import com.metaexploit.diversight.ui.main.home.HomeFragmentDirections
import org.koin.androidx.viewmodel.ext.android.getViewModel

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var viewModel: MainViewModel
    private lateinit var user: String

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)

        configureWindow()
        getCurrentUser()
        setBottomNavigation()
        setViewModel()
        setObserver()
    }

    private fun configureWindow() {
        this.window.statusBarColor = this.getColor(R.color.blue_0)
        this.window.navigationBarColor = this.getColor(R.color.white)

        val winController = WindowInsetsControllerCompat(window, binding.root)
        winController.isAppearanceLightStatusBars = false
        winController.isAppearanceLightNavigationBars = true
    }

    private fun getCurrentUser() {
//        val sharedPref = this.getSharedPreferences(
//            this.getString(R.string.id_shared_pref),
//            Context.MODE_PRIVATE
//        ) ?: return
//        user = sharedPref.getString(this.getString(R.string.id_user), "") ?: ""

    }

    private fun setBottomNavigation() {
        binding.bottomNavigationView.setOnItemSelectedListener { item ->
            when (item.itemId) {
                R.id.userMenu -> {
                    this.findNavController(R.id.fgContainerView).navigate(
                        HomeFragmentDirections.actionHomeFragmentToUserFragment(user)
                    )
                    true
                }
                R.id.homeMenu -> {
                    this.findNavController(R.id.fgContainerView).navigate(R.id.homeFragment)
                    true
                }
                else -> false
            }
        }
    }

    private fun setViewModel() {
        viewModel = getViewModel()
    }

    private fun setObserver() {
        val observer = Observer<Boolean> { b ->
            binding.bottomNavigationView.visibility = if (b) View.VISIBLE else View.GONE
        }
        viewModel.visibilityBN.observe(this, observer)
    }
}