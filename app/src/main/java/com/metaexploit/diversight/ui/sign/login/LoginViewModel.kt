package com.metaexploit.diversight.ui.sign.login

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.google.gson.Gson
import com.metaexploit.diversight.domain.LoginUseCase
import com.metaexploit.diversight.domain.ResultWrapper
import com.metaexploit.diversight.domain.SaveLocalUserUseCase
import com.metaexploit.diversight.network.model.User
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.Response

class LoginViewModel(
    private val loginUseCase: LoginUseCase,
    private val saveLocalUserUseCase: SaveLocalUserUseCase
) : ViewModel() {

    private val _isLoading: MutableLiveData<Boolean?> = MutableLiveData(null)
    val isLoading: LiveData<Boolean?> = _isLoading

    private val _onResponse: MutableLiveData<Int> = MutableLiveData()
    val onResponse: LiveData<Int> = _onResponse

    fun login(email: String, password: String) {
        CoroutineScope(Dispatchers.Main).launch {
            when (val response = loginUseCase.login(email, password)) {
                is ResultWrapper.Success -> handleLogin(response.value)
                is ResultWrapper.Failure -> handleError(response.throwable)
            }
        }
    }

    private fun handleError(throwable: Throwable) {
        _onResponse.value = 3
    }

    private fun setLoading(isLoading: Boolean) {
        _isLoading.value = isLoading
    }

    private fun handleLogin(response: Response<User>) {
        when (response.body()?.message) {
            "Colaborador Nao Encontrado" -> {
                _onResponse.value = 0
            }
            "Senha Incorreta" -> {
                _onResponse.value = 1
            }
            else -> {
                _onResponse.value = 2
                val user = Gson().toJson(response.body())
                saveLocalUserUseCase.saveLocalUser(user)
            }
        }

    }

}