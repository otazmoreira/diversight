package com.metaexploit.diversight.ui.sign.signup.user

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentSignUserBinding
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_user.UserQuestionsViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel
import timber.log.Timber

class SignUserFragment : Fragment() {

    private lateinit var binding: FragmentSignUserBinding
    private lateinit var viewModel: SignUserViewModel
    private val signupViewModel: SignupViewModel by activityViewModels()
    private val userQuestionsViewModel: UserQuestionsViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        viewModel = getViewModel()
        signupViewModel.setProgress(15)
        signupViewModel.setFirstScreen(true)
//        userQuestionsViewModel.removeToastPermission()
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_sign_user, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val permissionObserver = Observer<Boolean> { permission ->
            if (permission) {
                this.findNavController().navigate(
                    SignUserFragmentDirections.actionSignUserFragmentToSignEnterpriseFragment()
                )
//                userQuestionsViewModel.removePermission()
            } else {
                userQuestionsViewModel.toastPermission.value?.let { toastPermission ->
                    if (toastPermission) {
                        Toast.makeText(activity, getString(R.string.empty_input), Toast.LENGTH_SHORT).show()
                    }
                }
            }

        }

        userQuestionsViewModel.permission.observe(viewLifecycleOwner, permissionObserver)

//        binding.btnNext.setOnClickListener { userQuestionsViewModel.verifyIsEmpty() }
    }
}