package com.metaexploit.diversight.ui.sign.signup.user

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.metaexploit.diversight.databinding.FragmentSignUserBinding
import com.metaexploit.diversight.ui.questions.questions_user.UserQuestionsViewModel
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel
import com.metaexploit.diversight.uikit.BaseFragment
import org.koin.androidx.viewmodel.ext.android.getViewModel

class SignUserFragment : BaseFragment<FragmentSignUserBinding>() {

    private lateinit var signUserViewModel: SignUserViewModel
    private val signupViewModel: SignupViewModel by activityViewModels()
    private val userQuestionsViewModel: UserQuestionsViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View = FragmentSignUserBinding.inflate(inflater, container, false).apply {
        binding = this
        signUserViewModel = getViewModel()
        signupViewModel.setProgress(15)
        signupViewModel.setFirstScreen(true)
    }.root

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setObservers()
        setListeners()
    }

    private fun setListeners() {
        binding?.btnNext?.setOnClickListener {
            userQuestionsViewModel.setOnGetPersonalData(permission = true)
            findNavController().navigate(
                SignUserFragmentDirections.actionSignUserFragmentToSignEnterpriseFragment()
            )
        }
    }

    private fun setObservers() {
//        userQuestionsViewModel.permission.observe(viewLifecycleOwner, { permission ->
//            if (permission) {
//                this.findNavController().navigate(
//                    SignUserFragmentDirections.actionSignUserFragmentToSignEnterpriseFragment()
//                )
//            } else {
//                userQuestionsViewModel.toastPermission.value?.let { toastPermission ->
//                    if (toastPermission) {
//                        Toast.makeText(activity, getString(R.string.empty_input), Toast.LENGTH_SHORT).show()
//                    }
//                }
//            }
//
//        })
    }
}