package com.metaexploit.diversight.ui.questions.questions_user

import androidx.fragment.app.FragmentActivity
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.google.android.material.textfield.TextInputLayout
import com.metaexploit.diversight.R

class UserQuestionsViewModel : ViewModel() {

    // TODO(BUG) - When the user open a menu and click in nextButton the code allows the app continue to next fragment.
    private val _permission: MutableLiveData<Boolean> = MutableLiveData(false)
    val permission: LiveData<Boolean> = _permission

    private val _toastPermission: MutableLiveData<Boolean> = MutableLiveData(true)
    val toastPermission: LiveData<Boolean> = _toastPermission

    private val _clearFocus: MutableLiveData<Boolean> = MutableLiveData(false)
    val clearFocus: LiveData<Boolean> = _clearFocus

    private val _name: MutableLiveData<String> = MutableLiveData()
    val name: LiveData<String> = _name

    private val _skin: MutableLiveData<String> = MutableLiveData()
    val skin: LiveData<String> = _skin

    private val _sex: MutableLiveData<String> = MutableLiveData()
    val sex: LiveData<String> = _sex

    private val _gender: MutableLiveData<String> = MutableLiveData()
    val gender: LiveData<String> = _gender

    private val _pcd: MutableLiveData<Boolean> = MutableLiveData()
    val pcd: LiveData<Boolean> = _pcd

    private val _pcdVisual: MutableLiveData<Boolean> = MutableLiveData()
    val pcdVisual: LiveData<Boolean> = _pcdVisual

    private val _pcdPhysical: MutableLiveData<Boolean> = MutableLiveData()
    val pcdPhysical: LiveData<Boolean> = _pcdPhysical

    private val _pcdHearing: MutableLiveData<Boolean> = MutableLiveData()
    val pcdHearing: LiveData<Boolean> = _pcdHearing

    private val _pcdIntellectual: MutableLiveData<Boolean> = MutableLiveData()
    val pcdIntellectual: LiveData<Boolean> = _pcdIntellectual

    private val _pcdPsychosocial: MutableLiveData<Boolean> = MutableLiveData()
    val pcdPsychosocial: LiveData<Boolean> = _pcdPsychosocial

    private val _pcdReadapted: MutableLiveData<Boolean> = MutableLiveData()
    val pcdReadapted: LiveData<Boolean> = _pcdReadapted

    private val _birthday: MutableLiveData<String> = MutableLiveData()
    val birthday: LiveData<String> = _birthday

    fun setName(text: String) {
        _name.value = text
    }

    private fun setSkin(text: String) {
        _skin.value = text.lowercase()
    }

    private fun setSex(text: String) {
        _sex.value = text.lowercase()
    }

    private fun setGender(text: String) {
        _gender.value = text.lowercase()
    }

    private fun setPCD(b: Boolean) {
        _pcd.value = b
    }

    fun setOptionsPCD(id: Int, b: Boolean) {
        when (id) {
            0 -> {
                _pcdVisual.value = b
            }
            1 -> {
                _pcdPhysical.value = b
            }
            2 -> {
                _pcdHearing.value = b
            }
            3 -> {
                _pcdIntellectual.value = b
            }
            4 -> {
                _pcdPsychosocial.value = b
            }
            else -> {
                _pcdReadapted.value = b
            }
        }
    }

    fun setBirthday(text: String) {
        _birthday.value = text
    }

//    fun setValue(edtID: Int, value: String, binding: FragmentQuestionsUserBinding) {
//        when (edtID) {
//            binding.edtName.id -> {
//                setName(value)
//            }
//            binding.edtSkin.id -> {
//                setSkin(value)
//            }
//            binding.edtSex.id -> {
//                setSex(value)
//            }
//            binding.edtGender.id -> {
//                setGender(value)
//            }
//            binding.edtPCD.id -> {
//                binding.edtPCD.editText?.let {
//                    if (it.text.toString() == "NÃ£o possui") {
//                        setPCD(false)
//                    } else {
//                        setPCD(true)
//                    }
//                }
//            }
//            else -> {
//                setBirthday(value)
//            }
//        }
//    }

    fun textIsEmpty(activity: FragmentActivity, editLayout: TextInputLayout) {
        editLayout.editText?.let { edt ->
            val text = edt.text
            if (text.isBlank() || text.toString() == activity.getString(R.string.select)) {
                editLayout.isErrorEnabled = true
                editLayout.error = activity.getString(R.string.empty_input)
            } else {
                editLayout.isErrorEnabled = false
            }
        }
    }

//    fun verifyIsEmpty() {
//        val menuList = listOf(name.value, skin.value, sex.value, gender.value, birthday.value)
//        var counter = 0
//        for (item in menuList) {
//            if (item == null || item.isBlank()) {
//                _toastPermission.value = true
//                counter++
//            }
//        }
//
//        if (pcd.value == null) {
//            _toastPermission.value = true
//            counter++
//        }
//
//        _permission.value = counter <= 0
//    }

//    fun clearAllFocus(binding: FragmentQuestionsUserBinding) {
//        val list = listOf(
//            binding.autoName,
//            binding.autoSkin,
//            binding.autoSex,
//            binding.autoGender,
//            binding.autoPCD,
//            binding.autoBirthday
//        )
//        for (item in list) { item.clearFocus() }
//    }

//    fun setClearFocus() { _clearFocus.value = !_clearFocus.value!! }
//    fun removePermission() { _permission.value = false }
//    fun removeToastPermission() { _toastPermission.value = false }
}