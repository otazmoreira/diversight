package com.metaexploit.diversight.ui.main.home

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.widget.AppCompatImageView
import androidx.appcompat.widget.AppCompatTextView
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.google.android.material.button.MaterialButton
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentHomeBinding
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.ui.main.MainViewModel
import timber.log.Timber

class HomeFragment : Fragment() {

    // Data binding
    private lateinit var binding: FragmentHomeBinding

    // Filter lists reference
    private lateinit var listFilter: List<MaterialButton>

    // Filter lists
    private var npsForms: MutableList<Form> = mutableListOf()
    private var admDemForms: MutableList<Form> = mutableListOf()

    // Adapters
    private val dailyResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val weeklyResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val npsResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val admDemResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }

    private val activityViewModel: MainViewModel by activityViewModels()

    private lateinit var user: String

    private var npsCounter: Int = 0
    private var admDemCounter: Int = 0

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)
        getUserCurrent()
        setAdapters()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setEmptyImage(view)

        activityViewModel.setVisibilityBN(true)

        npsForms = mutableListOf()
        admDemForms = mutableListOf()

        binding.btnFilterNps.addOnCheckedChangeListener { button, isChecked ->
            if (isChecked) {
                setNpsFilter(view)
            } else {
                callAdapters(view)
            }
        }

        // Set ViewModel observer Forms from backend
        activityViewModel.listForm.observe(viewLifecycleOwner, { forms ->
            forms?.let {
                filterForms(it, view)
            }
        })

        // Get references
        listFilter = listOf(binding.btnFilterDaily, binding.btnFilterWeekly, binding.btnFilterNps)

        // Set setFilterFunction in filter list
        for (filter in listFilter) {
            filter.setOnClickListener { setFilterFunction(it.id) }
        }
    }

    private fun setEmptyImage(view: View) {
        view.findViewById<AppCompatImageView>(R.id.imageStatus).setBackgroundResource(R.drawable.img_status_empty)
        view.findViewById<AppCompatTextView>(R.id.textStatus).text = this.getString(R.string.status_empty)
    }

    // Set adapters
    private fun setAdapters() {
        binding.listDaily.adapter = dailyResearchAdapter
        binding.listWeekly.adapter = weeklyResearchAdapter
        binding.listNps.adapter = npsResearchAdapter
        binding.listAdmDem.adapter = admDemResearchAdapter
    }

    // Call adapters
    private fun callAdapters(view: View) {
//      dailyResearchAdapter.setList()
//      weeklyResearchAdapter.setList()
        callNpsAdapter(view)
        callAdmDemAdapter(view)
    }
    private fun callAdmDemAdapter(view: View) {
        if (admDemCounter > 0) {
            admDemResearchAdapter.setList(admDemForms)
            setVisibilityAdmDem(true)
            setVisibilityEmptyStatus(view, false)
        } else {
            setVisibilityAdmDem(false)
        }
    }

    // Visibility AdmDem
    private fun setVisibilityAdmDem(b: Boolean) {
        binding.titleAdmDem.visibility = if (b) View.VISIBLE else View.GONE
        binding.listAdmDem.visibility = if (b) View.VISIBLE else View.GONE
    }

    // Nps adapter function
    private fun callNpsAdapter(view: View) {
        if (npsCounter > 0) {
            npsResearchAdapter.setList(npsForms)
            binding.titleNps.visibility = View.VISIBLE
            binding.listNps.visibility = View.VISIBLE
            setVisibilityEmptyStatus(view, false)
        } else {
            binding.titleNps.visibility = View.GONE
            binding.listNps.visibility = View.GONE
        }
    }

    // Set visibility empty status
    private fun setVisibilityEmptyStatus(view: View, b: Boolean) {
        view.findViewById<AppCompatImageView>(R.id.imageStatus).visibility = if (b) View.VISIBLE else View.GONE
        view.findViewById<AppCompatTextView>(R.id.textStatus).visibility = if (b) View.VISIBLE else View.GONE
    }

    // Disable other filters when clicked
    private fun setFilterFunction(selected: Int) {
        for (filter in listFilter) {
            if (filter.id != selected) {
                filter.isChecked = false
            }
        }
    }

    // Filter forms
    private fun filterForms(listForm: List<Form>, view: View) {

        for (form in listForm) {
            when (form.type) {
                "nps" -> {
                    npsForms.add(form)
                    npsCounter++
                }
                "adm" -> {
                    admDemForms.add(form)
                    admDemCounter++
                }
                "dem" -> {
                    admDemForms.add(form)
                    admDemCounter++
                }
            }
        }
        callAdapters(view)
    }

    // Set click in item research
    private fun setClick(form: Form) {
        val formConverted = Gson().toJson(form)
        this.findNavController()
            .navigate(HomeFragmentDirections.actionHomeFragmentToResearchFragment(formConverted))
    }

    // Get user from SharedPreferences
    private fun getUserCurrent() {
        val sharedPref = activity?.getSharedPreferences(activity?.getString(R.string.id_shared_pref), Context.MODE_PRIVATE)?: return
        user = sharedPref.getString(activity?.getString(R.string.id_user), "") ?: ""
    }

    // Filter functions
    private fun setNpsFilter(view: View) {
        Timber.d("JOOJ NPS FILTER")
        binding.listNps.removeAllViews()
        if (npsCounter <= 0) {
            setVisibilityEmptyStatus(view, true)
        } else {
            setVisibilityAdmDem(false)
            callNpsAdapter(view)
        }
    }
}