package com.metaexploit.diversight.ui.main.home

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.google.android.material.button.MaterialButton
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentHomeBinding
import com.metaexploit.diversight.remote.Form
import com.metaexploit.diversight.ui.main.MainViewModel

class HomeFragment : Fragment() {

    // Data binding
    private lateinit var binding: FragmentHomeBinding

    // Filter lists reference
    private lateinit var listFilter: List<MaterialButton>

    // Filter lists
    private val npsForms: MutableList<Form> = mutableListOf()
    private val admDemForms: MutableList<Form> = mutableListOf()

    // Adapters
    private val dailyResearchAdapter: ResearchAdapter by lazy { ResearchAdapter { setClick(it) } }
    private val weeklyResearchAdapter: ResearchAdapter by lazy { ResearchAdapter { setClick(it) } }
    private val npsResearchAdapter: ResearchAdapter by lazy { ResearchAdapter { setClick(it) } }
    private val admDemResearchAdapter: ResearchAdapter by lazy { ResearchAdapter { setClick(it) } }

    private val viewModel: MainViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)
        setAdapters()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Set ViewModel observer Forms from backend
        viewModel.listForm.observe(viewLifecycleOwner, { forms ->
            forms?.let {
                filterForms(it)
            }
        })

        // Get references
        listFilter = listOf(binding.btnFilterDaily, binding.btnFilterWeekly, binding.btnFilterNps)

        // Set setFilterFunction in filter list
        for (filter in listFilter) {
            filter.setOnClickListener { setFilterFunction(it.id) }
        }
    }

    // Set adapters
    private fun setAdapters() {
        binding.listDaily.adapter = dailyResearchAdapter
        binding.listWeekly.adapter = weeklyResearchAdapter
        binding.listNps.adapter = npsResearchAdapter
        binding.listAdmDem.adapter = admDemResearchAdapter
    }

    // Call adapters
    private fun callAdapters() {
//      dailyResearchAdapter.setList()
//      weeklyResearchAdapter.setList()
        npsResearchAdapter.setList(npsForms)
        admDemResearchAdapter.setList(admDemForms)
    }

    // Disable other filters when clicked
    private fun setFilterFunction(selected: Int) {
        for (filter in listFilter) {
            if (filter.id != selected) {
                filter.isChecked = false
            }
        }
    }

    private fun filterForms(listForm: List<Form>) {
        for (form in listForm) {
            when (form.type) {
                "nps" -> npsForms.add(form)
                "adm" -> admDemForms.add(form)
                "dem" -> admDemForms.add(form)
            }
        }
        callAdapters()
    }

    // Set click in item research
    private fun setClick(form: Form) {
        val formConverted = Gson().toJson(form)
        setSharedPref(formConverted)
        this.findNavController()
            .navigate(HomeFragmentDirections.actionHomeFragmentToResearchFragment())
    }

    private fun setSharedPref(formJSON: String) {
        val sharedPref =
            activity?.getSharedPreferences(getString(R.string.id_shared_pref), Context.MODE_PRIVATE)
        with(sharedPref?.edit()) {
            this?.putString(getString(R.string.id_form), formJSON)
            this?.commit()
        }
    }
}