package com.metaexploit.diversight.ui.main.home

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.widget.AppCompatImageView
import androidx.appcompat.widget.AppCompatTextView
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.google.android.material.button.MaterialButton
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentHomeBinding
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.request.FormQuestion
import com.metaexploit.diversight.remote.request.FormQuestionOption
import com.metaexploit.diversight.ui.main.MainViewModel

class HomeFragment : Fragment() {

    // Data binding
    private lateinit var binding: FragmentHomeBinding

    // Filter lists reference
    private lateinit var listFilter: List<MaterialButton>

    // Filter lists
    private var dailyForms: MutableList<Form> = mutableListOf()
    private var weeklyForms: MutableList<Form> = mutableListOf()
    private var npsForms: MutableList<Form> = mutableListOf()
    private var admDemForms: MutableList<Form> = mutableListOf()

    // Adapters
    private val dailyResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val weeklyResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val npsResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }
    private val admDemResearchAdapter: HomeAdapter by lazy { HomeAdapter { setClick(it) } }

    private val activityViewModel: MainViewModel by activityViewModels()

    private lateinit var user: String

    private var dailyCounter: Int = 0
    private var weeklyCounter: Int = 0
    private var npsCounter: Int = 0
    private var admDemCounter: Int = 0

    private var dailyFilterActive: Boolean = false
    private var weeklyFilterActive: Boolean = false
    private var npsFilterActive: Boolean = false

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)
        getUserCurrent()
        setAdapters()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setEmptyImage(view)
        setFakeForms(5, view)
        activityViewModel.setVisibilityBN(true)

        npsForms = mutableListOf()
        admDemForms = mutableListOf()

        binding.btnFilterDaily.addOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                dailyFilterActive = true
                setDailyFilter(view)
            } else {

                if (!weeklyFilterActive && !npsFilterActive) {
                    callAdapters(view)
                }
                dailyFilterActive = false
            }
        }

        binding.btnFilterWeekly.addOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                weeklyFilterActive = true
                setWeeklyFilter(view)
            } else {
                if (!dailyFilterActive && !npsFilterActive) {
                    callAdapters(view)
                }
                weeklyFilterActive = false
            }
        }

        binding.btnFilterNps.addOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                npsFilterActive = true
                setNpsFilter(view)
            } else {
                if (!dailyFilterActive && !weeklyFilterActive) {
                    callAdapters(view)
                }
                npsFilterActive = false
            }
        }

        // Set ViewModel observer Forms from backend
        activityViewModel.listForm.observe(viewLifecycleOwner, { forms ->
            forms?.let {
                filterForms(it, view)
            }
        })

        // Get references
        listFilter = listOf(binding.btnFilterDaily, binding.btnFilterWeekly, binding.btnFilterNps)

        // Set setFilterFunction in filter list
        for (filter in listFilter) {
            filter.setOnClickListener { setFilterFunction(it.id) }
        }
    }

    private fun setFakeForms(quantity: Int, view: View) {
        var counter = 0
        var type = ""
        val listFakeform = mutableListOf<Form>()
        while (counter < quantity) {
            when ((0..1).random()) {
                0 -> type = "diaria"
                1 -> type = "semanal"
            }
            listFakeform.add(createFakeForm(type))
            counter++
        }
        filterForms(listFakeform, view)
    }

    private fun createFakeForm(type: String): Form {
        return if (type == "diaria") {
            Form(
                0,
                type,
                listOf(
                    FormQuestion(
                        0,
                        true,
                        "Como você está se sentindo hoje?",
                        listOf(
                            FormQuestionOption("Muito ruim"),
                            FormQuestionOption("Ruim"),
                            FormQuestionOption("Normal"),
                            FormQuestionOption("Bom"),
                            FormQuestionOption("Muito bom")
                        )
                    )
                ),
                "2021-08-03"
            )
        } else {
            Form(
                0,
                type,
                listOf(
                    FormQuestion(
                        0,
                        true,
                        "Como você está se sentindo esta semana?",
                        listOf(
                            FormQuestionOption("Muito ruim"),
                            FormQuestionOption("Ruim"),
                            FormQuestionOption("Normal"),
                            FormQuestionOption("Bom"),
                            FormQuestionOption("Muito bom")
                        )
                    )
                ),
                "2021-08-03"
            )
        }
    }

    private fun setEmptyImage(view: View) {
        view.findViewById<AppCompatImageView>(R.id.imageStatus)
            .setBackgroundResource(R.drawable.img_status_empty)
        view.findViewById<AppCompatTextView>(R.id.textStatus).text =
            this.getString(R.string.status_empty)
    }

    // Set adapters
    private fun setAdapters() {
        binding.listDaily.adapter = dailyResearchAdapter
        binding.listWeekly.adapter = weeklyResearchAdapter
        binding.listNps.adapter = npsResearchAdapter
        binding.listAdmDem.adapter = admDemResearchAdapter
    }

    // Call adapters
    private fun callAdapters(view: View) {
        callDailyAdapter(view)
        callWeeklyAdapter(view)
        callNpsAdapter(view)
        callAdmDemAdapter(view)
    }

    // Daily
    private fun callDailyAdapter(view: View) {
        if (dailyCounter > 0) {
            dailyResearchAdapter.setList(dailyForms)
            setVisibilityDaily(true)
            setVisibilityEmptyStatus(view, false)
        } else {
            setVisibilityDaily(false)
        }
    }

    private fun setVisibilityDaily(b: Boolean) {
        binding.titleDaily.visibility = setVisibility(b)
        binding.listDaily.visibility = setVisibility(b)
    }

    // Weekly
    private fun callWeeklyAdapter(view: View) {
        if (weeklyCounter > 0) {
            weeklyResearchAdapter.setList(weeklyForms)
            setVisibilityWeekly(true)
            setVisibilityEmptyStatus(view, false)
        } else {
            setVisibilityWeekly(false)
        }
    }

    private fun setVisibilityWeekly(b: Boolean) {
        binding.titleWeekly.visibility = setVisibility(b)
        binding.listWeekly.visibility = setVisibility(b)
    }

    // AdmDem
    private fun callAdmDemAdapter(view: View) {
        if (admDemCounter > 0) {
            admDemResearchAdapter.setList(admDemForms)
            setVisibilityAdmDem(true)
            setVisibilityEmptyStatus(view, false)
        } else {
            setVisibilityAdmDem(false)
        }
    }

    private fun setVisibilityAdmDem(b: Boolean) {
        binding.titleAdmDem.visibility = setVisibility(b)
        binding.listAdmDem.visibility = setVisibility(b)
    }

    // Nps adapter function
    private fun callNpsAdapter(view: View) {
        if (npsCounter > 0) {
            npsResearchAdapter.setList(npsForms)
            setVisibilityNps(true)
            setVisibilityEmptyStatus(view, false)
        } else {
            setVisibilityNps(false)
        }
    }

    private fun setVisibilityNps(b: Boolean) {
        binding.titleNps.visibility = setVisibility(b)
        binding.listNps.visibility = setVisibility(b)
    }

    // Set visibility empty status
    private fun setVisibilityEmptyStatus(view: View, b: Boolean) {
        view.findViewById<AppCompatImageView>(R.id.imageStatus).visibility = setVisibility(b)
        view.findViewById<AppCompatTextView>(R.id.textStatus).visibility = setVisibility(b)
    }

    private fun setVisibility(b: Boolean): Int = if (b) View.VISIBLE else View.GONE

    // Disable other filters when clicked
    private fun setFilterFunction(selected: Int) {
        for (filter in listFilter) {
            if (filter.id != selected) {
                filter.isChecked = false
            }
        }
    }

    // Filter forms
    private fun filterForms(listForm: List<Form>, view: View) {

        for (form in listForm) {
            when (form.type) {
                "diaria" -> {
                    dailyForms.add(form)
                    dailyCounter++
                }
                "semanal" -> {
                    weeklyForms.add(form)
                    weeklyCounter++
                }
                "nps" -> {
                    npsForms.add(form)
                    npsCounter++
                }
                "adm" -> {
                    admDemForms.add(form)
                    admDemCounter++
                }
                "dem" -> {
                    admDemForms.add(form)
                    admDemCounter++
                }
            }
        }
        callAdapters(view)
    }

    // Set click in item research
    private fun setClick(form: Form) {
        val formConverted = Gson().toJson(form)
        val direction = when (form.type) {
            "diaria" -> {
                HomeFragmentDirections.actionHomeFragmentToEmotionalFragment(formConverted)
            }
            "semanal" -> {
                HomeFragmentDirections.actionHomeFragmentToEmotionalFragment(formConverted)
            }
            "nps" -> {
                HomeFragmentDirections.actionHomeFragmentToResearchFragment(formConverted)
            }
            "adm" -> {
                HomeFragmentDirections.actionHomeFragmentToResearchFragment(formConverted)
            }
            else -> {
                HomeFragmentDirections.actionHomeFragmentToResearchFragment(formConverted)
            }
        }
        this.findNavController().navigate(direction)
    }

    // Get user from SharedPreferences
    private fun getUserCurrent() {
        val sharedPref = activity?.getSharedPreferences(
            activity?.getString(R.string.id_shared_pref),
            Context.MODE_PRIVATE
        ) ?: return
        user = sharedPref.getString(activity?.getString(R.string.id_user), "") ?: ""
    }

    // Filter functions
    private fun setDailyFilter(view: View) {
        binding.listDaily.removeAllViews()
        if (dailyCounter <= 0) {
            setVisibilityEmptyStatus(view, true)
        } else {
            callDailyAdapter(view)
        }
        setVisibilityWeekly(false)
        setVisibilityNps(false)
        setVisibilityAdmDem(false)
    }

    private fun setWeeklyFilter(view: View) {
        binding.listWeekly.removeAllViews()
        if (weeklyCounter <= 0) {
            setVisibilityEmptyStatus(view, true)
        } else {
            callWeeklyAdapter(view)
        }
        setVisibilityDaily(false)
        setVisibilityNps(false)
        setVisibilityAdmDem(false)
    }

    private fun setNpsFilter(view: View) {
        binding.listNps.removeAllViews()
        if (npsCounter <= 0) {
            setVisibilityEmptyStatus(view, true)
        } else {
            callNpsAdapter(view)
        }
        setVisibilityDaily(false)
        setVisibilityWeekly(false)
        setVisibilityAdmDem(false)
    }
}