package com.metaexploit.diversight.ui.main.home

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import com.google.android.material.button.MaterialButton
import com.metaexploit.diversight.R
import com.metaexploit.diversight.ui.ResearchAdapter
import com.metaexploit.diversight.databinding.FragmentHomeBinding
import com.metaexploit.diversight.remote.DiversightService
import com.metaexploit.diversight.remote.Form
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.Response

class HomeFragment : Fragment() {

    // Data binding
    private lateinit var binding: FragmentHomeBinding
    // Filter lists reference
    private lateinit var listFilter: List<MaterialButton>

    // Filter lists
    private val npsForms: MutableList<Form> = mutableListOf()
    private val admDemForms: MutableList<Form> = mutableListOf()

    // Adapters
    private val dailyResearchAdapter: ResearchAdapter by lazy { ResearchAdapter() }
    private val weeklyResearchAdapter: ResearchAdapter by lazy { ResearchAdapter() }
    private val npsResearchAdapter: ResearchAdapter by lazy { ResearchAdapter() }
    private val admDemResearchAdapter: ResearchAdapter by lazy { ResearchAdapter() }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, false)
        getForms()
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // Get references
        listFilter = listOf(binding.btnFilterDaily, binding.btnFilterWeekly, binding.btnFilterNps)
//        listResearch = listOf(binding.listDaily, binding.listWeekly, binding.listNps, binding.listAdmDem)

        // Set setFilterFunction in filter list
        for (filter in listFilter) {
            filter.setOnClickListener { setFilterFunction(it.id) }
        }

        setAdapters()
    }

    // Set adapters
    private fun setAdapters() {
        binding.listDaily.adapter = dailyResearchAdapter
        binding.listWeekly.adapter = weeklyResearchAdapter
        binding.listNps.adapter = npsResearchAdapter
        binding.listAdmDem.adapter = admDemResearchAdapter
    }

    // Call adapters
    private fun callAdapters() {
//      dailyResearchAdapter.setList()
//      weeklyResearchAdapter.setList()
        npsResearchAdapter.setList(npsForms)
        admDemResearchAdapter.setList(admDemForms)
    }

    // Disable other filters when clicked
    private fun setFilterFunction(selected: Int) {
        for (filter in listFilter) {
            if (filter.id != selected) {
                filter.isChecked = false
            }
        }
    }

    // Get forms from backend
    private fun getForms() {
        CoroutineScope(Dispatchers.IO).launch {
            val response = DiversightService.newInstance().getForm()
            CoroutineScope(Dispatchers.Main).launch {
                handleFormResponse(response)
                callAdapters()
            }
        }
    }
    private fun handleFormResponse(response: Response<List<Form>>) {
        if (response.isSuccessful) {
            response.body()?.let { listForm ->
                for (form in listForm) {
                    when(form.type) {
                        "nps" -> npsForms.add(form)
                        "adm" -> admDemForms.add(form)
                        "dem" -> admDemForms.add(form)
                    }
                }
            }
        }
    }
}