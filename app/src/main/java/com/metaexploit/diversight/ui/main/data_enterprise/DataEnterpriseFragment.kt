package com.metaexploit.diversight.ui.main.data_enterprise

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentDataEnterpriseBinding
import com.metaexploit.diversight.network.model.User
import com.metaexploit.diversight.network.response.DataUser
import com.metaexploit.diversight.ui.main.MainViewModel
import com.metaexploit.diversight.ui.questions.questions_enterprise.EnterpriseQuestionsViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel

class DataEnterpriseFragment : Fragment() {

    private lateinit var binding: FragmentDataEnterpriseBinding
    private val args: DataEnterpriseFragmentArgs by navArgs()
    private lateinit var viewModel: DataEnterpriseViewModel
    private val activityViewModel: MainViewModel by activityViewModels()
    private val enterpriseQuestionViewModel: EnterpriseQuestionsViewModel by activityViewModels()
    private lateinit var user: User

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        viewModel = getViewModel()
        user = Gson().fromJson(args.user, User::class.java)
        activityViewModel.setVisibilityBN(false)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_data_enterprise, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.btnBack.setOnClickListener {
            this.findNavController().popBackStack()
        }

        val permissionObserver = Observer<Boolean> { permission ->
            if (permission) {
                viewModel.updateUserData(
                    DataUser(
                        id = user.id ?: 0,
                        name = user.name,
                        skin = user.skin,
                        sex = user.sex,
                        gender = user.gender,
                        birthday = user.birthday,
                        pcd = user.pcd,
                        pcd_visual = user.pcd_visual,
                        pcd_physical = user.pcd_physical,
                        pcd_hearing = user.pcd_hearing,
                        pcd_intellectual = user.pcd_intellectual,
                        pcd_psychosocial = user.pcd_psychosocial,
                        pcd_readapted = user.pcd_readapted,
                        enterprise = enterpriseQuestionViewModel.enterprise.value ?: "",
                        occupation = enterpriseQuestionViewModel.occupation.value ?: "",
                        office = enterpriseQuestionViewModel.office.value ?: ""
                    ), activity
                )
                enterpriseQuestionViewModel.removePermission()
            }
        }
        enterpriseQuestionViewModel.permission.observe(viewLifecycleOwner, permissionObserver)

        binding.btnUpdate.setOnClickListener {
            enterpriseQuestionViewModel.setClearFocus()
            enterpriseQuestionViewModel.verifyIsEmpty()
        }
    }
}