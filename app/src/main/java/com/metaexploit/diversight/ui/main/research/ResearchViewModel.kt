package com.metaexploit.diversight.ui.main.research

import android.content.Context
import androidx.fragment.app.FragmentActivity
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.remote.DiversightService
import com.metaexploit.diversight.remote.User
import com.metaexploit.diversight.remote.response.ResponseForm
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.response.ResponseFormQuestion
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import timber.log.Timber

class ResearchViewModel: ViewModel() {

    private val _formResponse: MutableLiveData<ResponseForm> = MutableLiveData()

    init {
        _formResponse.value = ResponseForm(response = mutableListOf())
    }

    private fun setUser(user: User) {
        _formResponse.value?.id_user = user.id
        _formResponse.value?.enterprise = user.enterprise
        _formResponse.value?.skin = user.skin
        _formResponse.value?.sex = user.sex
        _formResponse.value?.gender = user.gender
        _formResponse.value?.pcd = user.pcd
        _formResponse.value?.pcd_visual = user.pcd_visual
        _formResponse.value?.pcd_handicapped = user.pcd_physical
        _formResponse.value?.pcd_hearing = user.pcd_hearing
        _formResponse.value?.pcd_intellectual = user.pcd_intellectual
        _formResponse.value?.pcd_psychosocial = user.pcd_psychosocial
        _formResponse.value?.pcd_readapted = user.pcd_readapted
    }

    fun addFormOption(option: ResponseFormQuestion) {

        if (_formResponse.value == null) {
            _formResponse.value?.response?.add(option)
        } else {
            if (verifyOptions(option)) {
                _formResponse.value?.response?.add(option) }
        }
    }

    private fun verifyOptions(option: ResponseFormQuestion): Boolean {
        _formResponse.value?.response?.let{
            for (question in it) {
                if (question.id == option.id) {
                    it.remove(question)
                }
            }
        }

        return true
    }

    fun sendForm(form: Form, activity: FragmentActivity) {
        _formResponse.value?.id_form = form.id
        getUserCurrent(activity)
        CoroutineScope(Dispatchers.IO).launch {
            _formResponse.value?.let { form ->
                Timber.d("FORMULARIO: $form")
                DiversightService.newInstance().sendForm(form)
            }
        }
    }

    // Get user from SharedPreferences
    private fun getUserCurrent(activity: FragmentActivity) {
        val sharedPref = activity.getSharedPreferences(activity.getString(R.string.id_shared_pref), Context.MODE_PRIVATE)
            ?: return
        val user = sharedPref.getString(activity.getString(R.string.id_user), "") ?: ""
        val currentUser = Gson().fromJson(user, User::class.java)
        setUser(currentUser)
    }
}