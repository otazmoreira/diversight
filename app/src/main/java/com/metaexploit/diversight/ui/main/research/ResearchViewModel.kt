package com.metaexploit.diversight.ui.main.research

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.metaexploit.diversight.remote.DiversightService
import com.metaexploit.diversight.remote.User
import com.metaexploit.diversight.remote.response.ResponseForm
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.response.ResponseFormQuestion
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import timber.log.Timber

class ResearchViewModel: ViewModel() {

    private val _formOptionsResponse: MutableLiveData<List<ResponseFormQuestion>?> = MutableLiveData()
    val formOptionsResponse: LiveData<List<ResponseFormQuestion>?> = _formOptionsResponse

    private val _formResponse: MutableLiveData<ResponseForm> = MutableLiveData(
        ResponseForm()
    )
    val formResponse: LiveData<ResponseForm> = _formResponse

    fun setFormResponse(form: Form, user: User) {
        _formResponse.value?.id_form = form.id
        _formResponse.value?.id_user = user.id
        _formResponse.value?.enterprise = user.enterprise
        _formResponse.value?.skin = user.skin
        _formResponse.value?.sex = user.sex
        _formResponse.value?.gender = user.gender
        _formResponse.value?.pcd = user.pcd
        _formResponse.value?.pcd_visual = user.pcd_visual
        _formResponse.value?.pcd_handicapped = user.pcd_fisical
        _formResponse.value?.pcd_hearing = user.pcd_hearing
        _formResponse.value?.pcd_intellectual = user.pcd_intellectual
        _formResponse.value?.pcd_psychosocial = user.pcd_psychosocial
        _formResponse.value?.pcd_readapted = user.pcd_readapted
    }

    fun addFormOption(option: ResponseFormQuestion) {
        _formResponse.value?.response?.plus(option)
    }

    fun sendForm() {
        CoroutineScope(Dispatchers.IO).launch {
            val response = _formResponse.value?.let { form ->
                DiversightService.newInstance().sendForm(form)
            }
            Timber.d("$response")
        }
    }
}