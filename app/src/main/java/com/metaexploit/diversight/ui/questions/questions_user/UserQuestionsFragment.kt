package com.metaexploit.diversight.ui.questions.questions_user

import android.annotation.TargetApi
import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AutoCompleteTextView
import androidx.fragment.app.activityViewModels
import com.google.android.material.datepicker.MaterialDatePicker
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentQuestionsUserBinding
import com.metaexploit.diversight.uikit.BaseFragment
import java.time.Instant

class UserQuestionsFragment : BaseFragment<FragmentQuestionsUserBinding>() {

    private val userQuestionsViewModel: UserQuestionsViewModel by activityViewModels()
    private var date: String = ""

    private lateinit var autoBirthday: AutoCompleteTextView

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View = FragmentQuestionsUserBinding.inflate(inflater, container, false).apply {
        binding = this
    }.root

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        configureInputOptions()
        configureDatePicker()
        setObservers()
    }

    private fun configureInputOptions() {
        binding?.apply {
            inputSkin.setItems(Skin)
            inputSex.setItems(Sex)
            inputGender.setItems(Gender)
            inputPCD.setItems(PCD)
        }
    }

    private fun setObservers() {
        userQuestionsViewModel.onGetPersonalData.observe(viewLifecycleOwner, { saveData ->
            if (saveData) {
                savePersonalData()
            }
        })
    }

    private fun savePersonalData() {
        binding?.apply {
            userQuestionsViewModel.savePersonalData(
                inputName.getText(),
                inputSkin.getText(),
                inputSex.getText(),
                inputGender.getText(),
                inputPCD.getText() == PCD[1],
                optVisual.isChecked,
                optPhysical.isChecked,
                optHearing.isChecked,
                optIntellectual.isChecked,
                optPsychosocial.isChecked,
                optReadapted.isChecked,
                autoBirthday.text.toString()
            )
        }
    }

    private fun formatBirthday(birthday: String): String {
        val year = birthday.substring(0..3)
        val month = birthday.substring(5..6)
        val day = birthday.substring(8..9)

        return "$day/$month/$year"
    }


    @TargetApi(Build.VERSION_CODES.O)
    private fun configureDatePicker() {
        autoBirthday = binding?.autoBirthday!!
        val datePicker = MaterialDatePicker.Builder.datePicker()
            .setTitleText(getString(R.string.select_date))
            .setSelection(MaterialDatePicker.todayInUtcMilliseconds())
            .build()

        autoBirthday.setOnClickListener {
            datePicker.show(parentFragmentManager, "date picker")
        }

        autoBirthday.setOnFocusChangeListener { _, hasFocus ->
            if (hasFocus) {
                datePicker.show(parentFragmentManager, "date picker")
                binding?.edtBirthday?.isErrorEnabled = false
            } else {
                this.context?.let { hideKeyboard(autoBirthday) }
            }
        }

        // TODO - Substitute ofEpochMilli() to support API 24

        datePicker.addOnPositiveButtonClickListener {
            val instant = Instant.ofEpochMilli(it).toString()
            val year = instant.substring(0..3)
            val month = instant.substring(5..6)
            val day = instant.substring(8..9)

            val output = "$day/$month/$year"
            date = "$year-$month-$day"

            autoBirthday.setText(output)
            autoBirthday.clearFocus()
        }

        datePicker.addOnNegativeButtonClickListener {
            autoBirthday.clearFocus()
        }
    }


}