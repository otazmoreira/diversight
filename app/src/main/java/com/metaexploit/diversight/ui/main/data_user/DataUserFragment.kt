package com.metaexploit.diversight.ui.main.data_user

import android.os.Bundle
import android.view.ContextThemeWrapper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AutoCompleteTextView
import androidx.appcompat.widget.AppCompatTextView
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.core.content.res.ResourcesCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentDataUserBinding
import com.metaexploit.diversight.ui.main.MainViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel

class DataUserFragment : Fragment() {

    private lateinit var binding: FragmentDataUserBinding
    private lateinit var viewModel: DataUserViewModel
    private val activityViewModel: MainViewModel by activityViewModels()
    private var aux = true

    data class DropDownMenu(
        val linearLayout: LinearLayoutCompat,
        val autoComplete: AutoCompleteTextView,
        val items: Array<String>
    ) {
        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false

            other as DropDownMenu

            if (!items.contentEquals(other.items)) return false

            return true
        }

        override fun hashCode(): Int {
            return items.contentHashCode()
        }
    }

    private lateinit var listDropDownMenu: List<DropDownMenu>

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        viewModel = getViewModel()
        activityViewModel.setVisibilityBN(false)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_data_user, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.btnBack.setOnClickListener {
            this.findNavController().popBackStack()
        }
        listDropDownMenu = listOf(
            DropDownMenu(
                view.findViewById(R.id.listSkin),
                view.findViewById(R.id.autoSkin),
                resources.getStringArray(R.array.skins_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listSex),
                view.findViewById(R.id.autoSex),
                resources.getStringArray(R.array.sex_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listGender),
                view.findViewById(R.id.autoGender),
                resources.getStringArray(R.array.gender_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listPCD),
                view.findViewById(R.id.autoPCD),
                resources.getStringArray(R.array.pcd_response_list)
            )
        )
        setDropDownAdapters()
    }

    private fun setPersonalDropDown(list: LinearLayoutCompat? = null, b: Boolean, auto: AutoCompleteTextView? = null, items: Array<String>? = null) {
        if (b) {
            list?.visibility = View.VISIBLE
            list?.removeAllViews()
            for (item in items!!) {
                this.context?.let { context ->
                    val textView = AppCompatTextView(ContextThemeWrapper(context, R.style.InputItem))
                    textView.text = item
                    textView.setOnClickListener {
                        setPersonalDropDown(list = list, b = false)
                        auto?.setText(item)

                    }
                    list?.addView(textView)

                }
            }
            aux = !b
        } else {
            list?.removeAllViews()
            list?.visibility = View.GONE
            aux = !b
        }
    }

    private fun setDropDownAdapters() {
        for (dropMenu in listDropDownMenu) {
            dropMenu.autoComplete.setOnFocusChangeListener { _, hasFocus ->
                if (hasFocus) {
                    setPersonalDropDown(dropMenu.linearLayout, true, dropMenu.autoComplete, dropMenu.items)
                } else {
                    setPersonalDropDown(dropMenu.linearLayout, b = false )
                }
            }

            dropMenu.autoComplete.setOnClickListener {
                setPersonalDropDown(dropMenu.linearLayout, aux, dropMenu.autoComplete, dropMenu.items)
            }

        }
    }

}