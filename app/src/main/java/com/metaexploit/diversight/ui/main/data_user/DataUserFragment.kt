package com.metaexploit.diversight.ui.main.data_user

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentDataUserBinding
import com.metaexploit.diversight.remote.User
import com.metaexploit.diversight.remote.response.DataUser
import com.metaexploit.diversight.ui.main.MainViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_user.UserQuestionsViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel

class DataUserFragment : Fragment() {

    private lateinit var binding: FragmentDataUserBinding
    private lateinit var viewModel: DataUserViewModel
    private val args: DataUserFragmentArgs by navArgs()
    private lateinit var user: User
    private val activityViewModel: MainViewModel by activityViewModels()
    private val userQuestionViewModel: UserQuestionsViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        viewModel = getViewModel()
        user = Gson().fromJson(args.user, User::class.java)
        activityViewModel.setVisibilityBN(false)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_data_user, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.btnBack.setOnClickListener {
            this.findNavController().popBackStack()
        }

        val permissionObserver = Observer<Boolean> { permission ->
            if (permission) {
                viewModel.updateUserData(
                    DataUser(
                        id = user.id ?: 0,
                        name = userQuestionViewModel.name.value ?: "",
                        skin = userQuestionViewModel.skin.value ?: "",
                        sex = userQuestionViewModel.sex.value ?: "",
                        gender = userQuestionViewModel.gender.value ?: "",
                        birthday = userQuestionViewModel.birthday.value ?: "",
                        pcd = userQuestionViewModel.pcd.value ?: false,
                        pcd_visual = userQuestionViewModel.pcdVisual.value ?: false,
                        pcd_physical = userQuestionViewModel.pcdPhysical.value ?: false,
                        pcd_hearing = userQuestionViewModel.pcdHearing.value ?: false,
                        pcd_intellectual = userQuestionViewModel.pcdIntellectual.value ?: false,
                        pcd_psychosocial = userQuestionViewModel.pcdPsychosocial.value ?: false,
                        pcd_readapted = userQuestionViewModel.pcdReadapted.value ?: false,
                        enterprise = user.enterprise,
                        occupation = user.occupation,
                        office = user.office
                    ), activity
                )
                userQuestionViewModel.removePermission()
            }
        }
        userQuestionViewModel.permission.observe(viewLifecycleOwner, permissionObserver)

        binding.btnUpdate.setOnClickListener {
            userQuestionViewModel.setClearFocus()
            userQuestionViewModel.verifyIsEmpty()
        }
    }
}