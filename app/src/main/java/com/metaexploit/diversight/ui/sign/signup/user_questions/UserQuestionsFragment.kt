package com.metaexploit.diversight.ui.sign.signup.user_questions

import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.view.ContextThemeWrapper
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.AutoCompleteTextView
import androidx.appcompat.widget.AppCompatTextView
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.databinding.DataBindingUtil
import com.google.android.material.datepicker.MaterialDatePicker
import com.metaexploit.diversight.DropDownMenu
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentUserQuestionsBinding
import org.koin.androidx.viewmodel.ext.android.getViewModel
import java.time.Instant

class UserQuestionsFragment : Fragment() {

    private lateinit var binding: FragmentUserQuestionsBinding
    private lateinit var viewModel: UserQuestionsViewModel
    private var aux = true
    private var date: String = ""

    private lateinit var listDropDownMenu: List<DropDownMenu>
    private lateinit var autoBirthday: AutoCompleteTextView

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        viewModel = getViewModel()
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user_questions, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Lista de referências
        listDropDownMenu = listOf(
            DropDownMenu(
                view.findViewById(R.id.listSkin),
                view.findViewById(R.id.autoSkin),
                resources.getStringArray(R.array.skins_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listSex),
                view.findViewById(R.id.autoSex),
                resources.getStringArray(R.array.sex_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listGender),
                view.findViewById(R.id.autoGender),
                resources.getStringArray(R.array.gender_list)
            ),
            DropDownMenu(
                view.findViewById(R.id.listPCD),
                view.findViewById(R.id.autoPCD),
                resources.getStringArray(R.array.pcd_response_list)
            )
        )
        setDropDownAdapters()

        binding.autoName.setOnFocusChangeListener { _, hasFocus ->
            if(!hasFocus) {
                this.context?.let { hideKeyboard(it, view) }
            }
        }

        configureDatePicker(view)
    }

    private fun hideKeyboard(context: Context, view: View) {
        val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }

    private fun configureDatePicker(view: View) {
        autoBirthday = view.findViewById(R.id.autoBirthday)
        val datePicker = MaterialDatePicker.Builder.datePicker()
            .setTitleText(getString(R.string.select_date))
            .setSelection(MaterialDatePicker.todayInUtcMilliseconds())
            .build()

        autoBirthday.setOnClickListener {
            datePicker.show(parentFragmentManager, "date picker")
        }

        autoBirthday.setOnFocusChangeListener { _, hasFocus ->
            if (hasFocus) {
                datePicker.show(parentFragmentManager, "date picker")
            }
        }

        datePicker.addOnPositiveButtonClickListener {
            val instant = Instant.ofEpochMilli(it).toString()
            val year = instant.substring(0..3)
            val month = instant.substring(5..6)
            val day = instant.substring(8..9)

            val output = "$day/$month/$year"
            date = "$year-$month-$day"

            autoBirthday.setText(output)
        }
    }

    // Adapter ao dropdown menu
    private fun setPersonalDropDown(
        list: LinearLayoutCompat? = null,
        b: Boolean,
        auto: AutoCompleteTextView? = null,
        items: Array<String>? = null
    ) {
        if (b) {
            list?.visibility = View.VISIBLE
            list?.removeAllViews()
            for (item in items!!) {
                this.context?.let { context ->
                    val textView =
                        AppCompatTextView(ContextThemeWrapper(context, R.style.InputItem))
                    textView.text = item
                    textView.setOnClickListener {
                        setPersonalDropDown(list = list, b = false)
                        auto?.setText(item)
                    }

                    // Caso o item atual seja referente ao menu adapter, a depender da resposta recebe uma função específica.
                    if (item == resources.getStringArray(R.array.pcd_response_list)[0]) {
                        textView.setOnClickListener {
                            binding.containerPCDOptions.visibility = View.GONE
                            setPersonalDropDown(list = list, b = false)
                            auto?.setText(item)
                        }
                    } else if (item == resources.getStringArray(R.array.pcd_response_list)[1]) {
                        textView.setOnClickListener {
                            binding.containerPCDOptions.visibility = View.VISIBLE
                            setPersonalDropDown(list = list, b = false)
                            auto?.setText(item)
                        }
                    }
                    list?.addView(textView)

                }
            }
            aux = !b
        } else {
            list?.removeAllViews()
            list?.visibility = View.GONE
            aux = !b
        }
    }

    // Adiciona adapter em todos os menus
    private fun setDropDownAdapters() {
        for (dropMenu in listDropDownMenu) {
            // Quando menu tem o foco, inicia o adapter. Quando não, desativa.
            dropMenu.autoComplete.setOnFocusChangeListener { _, hasFocus ->
                if (hasFocus) {
                    setPersonalDropDown(
                        dropMenu.linearLayout,
                        true,
                        dropMenu.autoComplete,
                        dropMenu.items
                    )
                } else {
                    setPersonalDropDown(dropMenu.linearLayout, b = false)
                }
            }

            // Quando clicar no menu, mesmo que ele esteja em foco vai ser ativado e desativado
            dropMenu.autoComplete.setOnClickListener {
                setPersonalDropDown(
                    dropMenu.linearLayout,
                    aux,
                    dropMenu.autoComplete,
                    dropMenu.items
                )
            }

        }
    }

}