package com.metaexploit.diversight.ui.sign.signup.password

import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentSignPasswordBinding
import com.metaexploit.diversight.ui.sign.SignViewModel
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel

class SignPasswordFragment : Fragment() {

    private val viewModel: SignPasswordViewModel by activityViewModels()
    private val signupViewModel: SignupViewModel by activityViewModels()
    private val signActivityViewModel: SignViewModel by activityViewModels()
    private lateinit var binding: FragmentSignPasswordBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        signupViewModel.setProgress(100)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_sign_password, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.autoPassword.setOnFocusChangeListener { _, hasFocus ->
            val edt = binding.edtPassword
            if (!hasFocus) {
                viewModel.setPassword(binding.autoPassword.text.toString())

                if (binding.autoPassword.text.toString().isBlank()) {
                    edt.error = getString(R.string.empty_input)
                    edt.isErrorEnabled = true
                }
            }  else {
                edt.isErrorEnabled = false
            }
        }

        binding.autoPasswordConfirm.setOnFocusChangeListener { _, hasFocus ->
            val edt = binding.edtPasswordConfirm
            if (!hasFocus) {
                viewModel.setConfirmPassword(binding.autoPasswordConfirm.text.toString())
                if (binding.autoPasswordConfirm.text.toString().isBlank()) {
                    edt.error = getString(R.string.empty_input)
                    edt.isErrorEnabled = true
                }
            }  else {
                edt.isErrorEnabled = false
            }
        }

        binding.btnNext.setOnClickListener {
            this.context?.let { context ->
                hideKeyboard(context, it)
            }
            binding.autoPassword.clearFocus()
            binding.autoPasswordConfirm.clearFocus()
            if (!viewModel.verifyEmpty()) {
                if (viewModel.verifyMatchPassword()) {
                    signActivityViewModel.setLoading()
                    signupViewModel.setReady(true)
                } else {
                    Toast.makeText(activity, getString(R.string.password_do_not_match), Toast.LENGTH_SHORT).show()
                }
            } else {
                Toast.makeText(activity, getString(R.string.empty_input), Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun hideKeyboard(context: Context, view: View) {
        val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }

}