package com.metaexploit.diversight.ui.sign.signup.email

import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.google.android.material.button.MaterialButton
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentSignEmailBinding
import com.metaexploit.diversight.databinding.FragmentSignEmailBindingImpl
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel

class SignEmailFragment : Fragment() {
    private val viewModel: SignEmailViewModel by activityViewModels()
    private val signupViewModel: SignupViewModel by activityViewModels()
    private lateinit var binding: FragmentSignEmailBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        signupViewModel.setProgress(75)
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_sign_email, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.autoEmail.setOnFocusChangeListener { _, hasFocus ->
            val edt = binding.edtEmail
            if (!hasFocus) {
                edt.editText?.let {
                    viewModel.setEmail(it.text.toString())
                }
                if (binding.autoEmail.text.toString().isBlank()) {
                    edt.error = getString(R.string.empty_input)
                    edt.isErrorEnabled = true
                }
            } else {
                edt.isErrorEnabled = false
            }
        }

        binding.btnNext.setOnClickListener {
            binding.edtEmail.clearFocus()
            if (viewModel.verifyEmpty()) {
                this.findNavController().navigate(SignEmailFragmentDirections.actionSignEmailFragmentToSignPasswordFragment())
                this.context?.let { context ->
                    hideKeyboard(context, it)
                }
            } else {
                Toast.makeText(activity, getString(R.string.empty_input), Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun hideKeyboard(context: Context, view: View) {
        val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }
}