package com.metaexploit.diversight.ui.sign.signup.questions_user

import android.annotation.TargetApi
import android.app.Activity
import android.content.Context
import android.os.Build
import android.os.Bundle
import android.view.ContextThemeWrapper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.AutoCompleteTextView
import androidx.appcompat.widget.AppCompatTextView
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import com.google.android.material.datepicker.MaterialDatePicker
import com.google.android.material.textfield.TextInputLayout
import com.google.gson.Gson
import com.metaexploit.diversight.DropDownMenu
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentQuestionsUserBinding
import com.metaexploit.diversight.remote.User
import com.metaexploit.diversight.ui.main.user.UserViewModel
import java.time.Instant

class UserQuestionsFragment : Fragment() {

    private lateinit var binding: FragmentQuestionsUserBinding
    private val viewModel: UserQuestionsViewModel by activityViewModels()
    private val userViewModel: UserViewModel by activityViewModels()
    private var date: String = ""

    private lateinit var autoBirthday: AutoCompleteTextView

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding =
            DataBindingUtil.inflate(inflater, R.layout.fragment_questions_user, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.inputSkin.setItems(
            listOf(
                "Branca",
                "Parda",
                "Preta",
                "Amarela",
                "Indígena"
            )
        )
        binding.inputSex.setItems(
            listOf(
                "Homem cisgênero",
                "Mulher cisgênero",
                "Homem transgênero",
                "Mulher transgênero",
                "Agênero",
                "Não binário"
            )
        )
        binding.inputGender.setItems(
            listOf(
                "Heterossexual",
                "Homossexual",
                "Bissexual",
                "Panssexual",
                "Assexual"
            )
        )
        binding.inputPCD.setItems(
            listOf(
                "Não possui",
                "Possui"
            )
        )
//        setFocusListener(binding.edtName, binding.autoName, view)
        configureCheckBoxSelection()
        configureDatePicker(view)
        setObservers()
    }

    private fun setObservers() {
        val userUpdatePermissionObserver = Observer<Boolean> { permission ->
            if (permission) {
                setUserData()
            }
        }
        userViewModel.userUpdatePermission.observe(viewLifecycleOwner, userUpdatePermissionObserver)

        val clearFocusObserver = Observer<Boolean> {
            if (it) {
//                viewModel.clearAllFocus(binding)
            }
        }
        viewModel.clearFocus.observe(viewLifecycleOwner, clearFocusObserver)
    }

    private fun setUserData() {
        val user = getUser()
        // Set in View
        setUserDataView(user)
        // Set in viewModel
        setUserDataViewModel(user)

        userViewModel.setUserUpdatePermission()
    }

    private fun setUserDataViewModel(user: User) {
//        viewModel.setValue(binding.edtName.id, binding.autoName.text.toString(), binding)
//        viewModel.setValue(binding.edtSkin.id, binding.autoSkin.text.toString(), binding)
//        viewModel.setValue(binding.edtSex.id, binding.autoSex.text.toString(), binding)
//        viewModel.setValue(binding.edtGender.id, binding.autoGender.text.toString(), binding)

        val listPcdOptions = listOf(
            binding.optVisual,
            binding.optPhysical,
            binding.optHearing,
            binding.optIntellectual,
            binding.optPsychosocial,
            binding.optReadapted
        )
        var pcdOptionCounter = 0
        while (pcdOptionCounter < listPcdOptions.size) {
            viewModel.setOptionsPCD(pcdOptionCounter, listPcdOptions[pcdOptionCounter].isChecked)
            pcdOptionCounter++
        }

//        viewModel.setValue(binding.edtPCD.id, binding.autoPCD.text.toString(), binding)
//        viewModel.setValue(binding.edtBirthday.id, user.birthday, binding)
    }

    private fun setUserDataView(user: User) {
        binding.inputName.setText(user.name.replaceFirstChar { it.uppercase() })
        binding.inputSkin.setText(user.skin.replaceFirstChar { it.uppercase() })
        binding.inputSex.setText(user.sex.replaceFirstChar { it.uppercase() })
        binding.inputGender.setText(user.gender.replaceFirstChar { it.uppercase() })

        val pcdResponses = listOf(
            "Não possui",
            "Possui"
        )
        if (user.pcd) {
            binding.inputPCD.setText(pcdResponses[1])
            binding.containerPCDOptions.visibility = View.VISIBLE
            binding.optVisual.isChecked = user.pcd_visual
            binding.optPhysical.isChecked = user.pcd_physical
            binding.optHearing.isChecked = user.pcd_hearing
            binding.optIntellectual.isChecked = user.pcd_intellectual
            binding.optPsychosocial.isChecked = user.pcd_psychosocial
            binding.optReadapted.isChecked = user.pcd_readapted
        } else {
            binding.inputPCD.setText(pcdResponses[0])
        }
        val birthday = formatBirthday(user.birthday)
        binding.autoBirthday.setText(birthday)
    }

    private fun formatBirthday(birthday: String): String {
        val year = birthday.substring(0..3)
        val month = birthday.substring(5..6)
        val day = birthday.substring(8..9)

        return "$day/$month/$year"
    }

    private fun getUser(): User {
        val sharedPref =
            activity?.getSharedPreferences(getString(R.string.id_shared_pref), Context.MODE_PRIVATE)
        val user = sharedPref?.getString(getString(R.string.id_user), "user")
        return Gson().fromJson(user, User::class.java)
    }

    private fun configureCheckBoxSelection() {
        binding.optVisual.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(0, isChecked)
        }
        binding.optPhysical.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(1, isChecked)
        }
        binding.optHearing.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(2, isChecked)
        }
        binding.optIntellectual.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(3, isChecked)
        }
        binding.optPsychosocial.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(4, isChecked)
        }
        binding.optReadapted.setOnCheckedChangeListener { _, isChecked ->
            viewModel.setOptionsPCD(5, isChecked)
        }
    }


    private fun hideKeyboard(context: Context, view: View) {
        val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }

    @TargetApi(Build.VERSION_CODES.O)
    private fun configureDatePicker(view: View) {
        autoBirthday = binding.autoBirthday
        val datePicker = MaterialDatePicker.Builder.datePicker()
            .setTitleText(getString(R.string.select_date))
            .setSelection(MaterialDatePicker.todayInUtcMilliseconds())
            .build()

        autoBirthday.setOnClickListener {
            datePicker.show(parentFragmentManager, "date picker")
        }

        autoBirthday.setOnFocusChangeListener { _, hasFocus ->
            if (hasFocus) {
                datePicker.show(parentFragmentManager, "date picker")
                binding.edtBirthday.isErrorEnabled = false
            } else {
                this.context?.let { hideKeyboard(it, view) }
                activity?.let {
                    viewModel.textIsEmpty(it, binding.edtBirthday)
                }
                viewModel.setBirthday(date)
            }
        }

        // TODO - Substitute ofEpochMilli() to support API 24

        datePicker.addOnPositiveButtonClickListener {
            val instant = Instant.ofEpochMilli(it).toString()
            val year = instant.substring(0..3)
            val month = instant.substring(5..6)
            val day = instant.substring(8..9)

            val output = "$day/$month/$year"
            date = "$year-$month-$day"

            autoBirthday.setText(output)
            autoBirthday.clearFocus()
        }

        datePicker.addOnNegativeButtonClickListener {
            autoBirthday.clearFocus()
        }
    }


}