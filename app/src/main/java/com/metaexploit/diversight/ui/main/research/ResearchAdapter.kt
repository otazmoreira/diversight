package com.metaexploit.diversight.ui.main.research

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.RadioGroup
import androidx.appcompat.widget.AppCompatTextView
import androidx.fragment.app.FragmentActivity
import androidx.navigation.NavController
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.button.MaterialButton
import com.google.android.material.radiobutton.MaterialRadioButton
import com.google.gson.Gson
import com.metaexploit.diversight.*
import com.metaexploit.diversight.remote.request.Form
import com.metaexploit.diversight.remote.request.FormQuestion
import com.metaexploit.diversight.remote.response.ResponseFormQuestion
import com.metaexploit.diversight.remote.response.ResponseFormQuestionOption

class ResearchAdapter(
    val context: FragmentActivity?,
    val setOptionClick: (question: ResponseFormQuestion) -> Unit
) : RecyclerView.Adapter<ResearchAdapter.BaseViewHolder<*>>() {

    data class Header(
        val type: String
    )

    data class Button(
        val text: String,
        val viewModel: ResearchViewModel,
        val form: String,
        val findNavController: NavController
    )

    companion object {
        private const val TYPE_HEADER = 0
        private const val TYPE_QUESTION = 1
        private const val TYPE_BUTTON = 2
    }

    private var body: MutableList<Any> = mutableListOf()

    abstract class BaseViewHolder<T>(itemView: View) : RecyclerView.ViewHolder(itemView) {
        abstract fun bind(item: T, position: Int)
    }

    inner class HeaderViewHolder(itemView: View) : BaseViewHolder<Header>(itemView) {
        override fun bind(item: Header, position: Int) {
            itemView.findViewById<AppCompatTextView>(R.id.itemTitleHeader).text = context?.let { activity ->
                activity.getString(
                    R.string.title_research_header,
                    when (item.type) {
                        TYPE_NPS -> activity.getString(R.string.nps)
                        TYPE_ADM -> activity.getString(R.string.adm)
                        TYPE_DEM -> activity.getString(R.string.dem)
                        else -> throw java.lang.IllegalArgumentException()
                    }
                )
            }
        }
    }

    inner class QuestionViewHolder(itemView: View) : BaseViewHolder<FormQuestion>(itemView) {
        override fun bind(item: FormQuestion, position: Int) {
            itemView.findViewById<AppCompatTextView>(R.id.counter).text =
                context?.getString(R.string.counter, position, body.size - 2)
            itemView.findViewById<AppCompatTextView>(R.id.enunciated).text = item.enunciated

            val optionsGroup = itemView.findViewById<RadioGroup>(R.id.optionsGroup)
            optionsGroup.removeAllViews()

            var counterOptions = 0
            while (counterOptions < item.listQuestionOption.size) {
                val option = MaterialRadioButton(itemView.context)
                option.text = item.listQuestionOption[counterOptions].text
                option.buttonTintList = context?.getColorStateList(R.color.cs_radiobutton)
                option.textSize = 14.toFloat()
                option.setOnClickListener {
                    val radioButtonID = optionsGroup.checkedRadioButtonId
                    val radioButton = optionsGroup.findViewById<MaterialRadioButton>(radioButtonID)
                    val index = optionsGroup.indexOfChild(radioButton)
                    val optionID = index + 1
                    setOptionClick(
                        ResponseFormQuestion(
                            position,
                            item.nps,
                            ResponseFormQuestionOption(optionID)
                        )
                    )
                }
                context?.getColor(R.color.black_0)?.let {
                    option.setTextColor(it)
                }
                optionsGroup.addView(option)
                counterOptions += 1
            }
        }
    }

    inner class ButtonViewHolder(itemView: View) : BaseViewHolder<Button>(itemView) {
        override fun bind(item: Button, position: Int) {
            val form = Gson().fromJson(item.form, Form::class.java)

            itemView.findViewById<MaterialButton>(R.id.btnSend).setOnClickListener {
                context?.let { activity ->
                    item.viewModel.sendForm(form, activity)
                }
                item.findNavController.navigate(
                    ResearchFragmentDirections.actionResearchFragmentToDoneFragment(item.form)
                )
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder<*> {
        return when (viewType) {
            TYPE_HEADER -> {
                val view = LayoutInflater.from(context).inflate(R.layout.item_header, parent, false)
                HeaderViewHolder(view)
            }
            TYPE_QUESTION -> {
                val view =
                    LayoutInflater.from(context).inflate(R.layout.item_question, parent, false)
                QuestionViewHolder(view)
            }
            TYPE_BUTTON -> {
                val view =
                    LayoutInflater.from(context).inflate(R.layout.item_button, parent, false)
                ButtonViewHolder(view)
            }
            else -> throw IllegalArgumentException()
        }
    }

    override fun onBindViewHolder(holder: BaseViewHolder<*>, position: Int) {
        val element = body[position]

        when (holder) {
            is HeaderViewHolder -> holder.bind(element as Header, position)
            is QuestionViewHolder -> holder.bind(element as FormQuestion, position)
            is ButtonViewHolder -> holder.bind(element as Button, position)
        }
    }

    override fun getItemViewType(position: Int): Int {
        return when (body[position]) {
            is Header -> TYPE_HEADER
            is FormQuestion -> TYPE_QUESTION
            is Button -> TYPE_BUTTON
            else -> throw IllegalArgumentException()
        }
    }

    override fun getItemCount(): Int {
        return body.size
    }

    fun setList(
        type: String,
        list: List<Any>,
        viewModel: ResearchViewModel,
        form: String,
        findNavController: NavController
    ) {
        body.add(0, Header(type))
        body.addAll(list)
        body.add(
            Button(
                "Enviar",
                viewModel,
                form,
                findNavController
            )
        )
    }
}