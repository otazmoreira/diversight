package com.metaexploit.diversight.ui.sign

import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.WindowInsetsControllerCompat
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.Observer
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.ActivitySignBinding
import com.metaexploit.diversight.ui.sign.signup.SignupViewModel
import com.metaexploit.diversight.ui.sign.signup.email.SignEmailViewModel
import com.metaexploit.diversight.ui.sign.signup.password.SignPasswordViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_enterprise.EnterpriseQuestionsViewModel
import com.metaexploit.diversight.ui.sign.signup.questions_user.UserQuestionsViewModel
import org.koin.androidx.viewmodel.ext.android.getViewModel

class SignActivity : AppCompatActivity() {

    private lateinit var binding: ActivitySignBinding
    private lateinit var viewModel: UserViewModel
    private lateinit var signupViewModel: SignupViewModel
    private lateinit var userQuestionsViewModel: UserQuestionsViewModel
    private lateinit var enterpriseQuestionsViewModel: EnterpriseQuestionsViewModel
    private lateinit var emailSignupViewModel: SignEmailViewModel
    private lateinit var passwordSignupViewModel: SignPasswordViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel = getViewModel()
        signupViewModel = getViewModel()
        userQuestionsViewModel = getViewModel()
        enterpriseQuestionsViewModel = getViewModel()
        emailSignupViewModel = getViewModel()
        passwordSignupViewModel = getViewModel()
        binding = DataBindingUtil.setContentView(this, R.layout.activity_sign)

        configureWindow()

        val loadingObserver = Observer<Boolean> {
            val visibility = if (it) View.VISIBLE else View.GONE
            binding.progressCircular.visibility = visibility
            binding.bcProgressCircular.visibility = visibility
        }

        viewModel.loading.observe(this, loadingObserver)
    }

    private fun configureWindow() {
        this.window.statusBarColor = this.getColor(R.color.white)
        this.window.navigationBarColor = this.getColor(R.color.white)

        val winController = WindowInsetsControllerCompat(window, binding.root)
        winController.isAppearanceLightStatusBars = true
        winController.isAppearanceLightNavigationBars = true
    }
}