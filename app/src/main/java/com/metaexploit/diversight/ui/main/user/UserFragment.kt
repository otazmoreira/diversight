package com.metaexploit.diversight.ui.main.user

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.google.gson.Gson
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentUserBinding
import com.metaexploit.diversight.network.model.User
import com.metaexploit.diversight.ui.main.MainViewModel
import com.metaexploit.diversight.ui.sign.SignActivity

class UserFragment : Fragment() {

    private val args: UserFragmentArgs by navArgs()
    private lateinit var binding: FragmentUserBinding
    private val activityViewModel: MainViewModel by activityViewModels()
    private val viewModel: UserViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
//        val user = getUserCurrent()
        activityViewModel.setVisibilityBN(true)

        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user, container, false)
//        binding.userName.text = user.name
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.btnLogout.setOnClickListener { logout() }
        binding.btnDataUser.setOnClickListener {
            viewModel.setUserUpdatePermission()
            this.findNavController()
                .navigate(UserFragmentDirections.actionUserFragmentToDataUserFragment(args.user))
        }
        binding.btnDataEnterprise.setOnClickListener {
            viewModel.setEnterpriseUpdatePermission()
            this.findNavController().navigate(
                UserFragmentDirections.actionUserFragmentToDataEnterpriseFragment(args.user)
            )
        }
    }

//    private fun getUserCurrent(): User {
//        val sharedPref = activity?.getSharedPreferences(
//            activity?.getString(R.string.id_shared_pref),
//            Context.MODE_PRIVATE
//        )
//        return Gson().fromJson(
//            sharedPref?.getString(activity?.getString(R.string.id_user), "") ?: "",
//            User::class.java
//        )
//    }

    private fun logout() {
        deleteUser()
        val intent = Intent(activity, SignActivity::class.java)
        activity?.startActivity(intent)
    }

    private fun deleteUser() {
//        val sharedPref = activity?.getSharedPreferences(
//            activity?.getString(R.string.id_shared_pref),
//            Context.MODE_PRIVATE
//        ) ?: return
//        with(sharedPref.edit()) {
//            putString(activity?.getString(R.string.id_user), "user")
//            commit()
//        }
    }

}