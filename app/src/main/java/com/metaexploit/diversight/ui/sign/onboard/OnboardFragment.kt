package com.metaexploit.diversight.ui.sign.onboard

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.res.ResourcesCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.databinding.DataBindingUtil
import androidx.navigation.fragment.findNavController
import androidx.viewpager2.adapter.FragmentStateAdapter
import androidx.viewpager2.widget.ViewPager2
import com.google.android.material.tabs.TabLayoutMediator
import com.metaexploit.diversight.R
import com.metaexploit.diversight.databinding.FragmentOnboardBinding
import com.metaexploit.diversight.databinding.FragmentPageBinding
import timber.log.Timber

class OnboardFragment : Fragment() {

    private lateinit var binding: FragmentOnboardBinding
    private lateinit var onboardAdapter: OnboardAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_onboard, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        configureWindow()
        binding.btnSkip.setOnClickListener { navigateToLogin() }

        onboardAdapter = OnboardAdapter(this)
        val viewPager = binding.onboardContainer
        viewPager.adapter = onboardAdapter

        val tabLayout = binding.tabLayout

        // _ = position
        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
//            if (position == 0) {
//                tab.icon = ResourcesCompat.getDrawable(resources, R.drawable.ic_dot_on, null)
//            } else {
//                tab.icon = ResourcesCompat.getDrawable(resources, R.drawable.ic_dot_off, null)
//            }
            tab.icon = ResourcesCompat.getDrawable(resources, R.drawable.ic_dot_off, null)
        }.attach()

        var lastItem = false

        binding.btnNext.setOnClickListener {
            viewPager.currentItem = viewPager.currentItem + 1
            binding.btnBack.visibility = View.VISIBLE

            if (lastItem && viewPager.currentItem == 2) {
                navigateToLogin()
            }

            if (viewPager.currentItem == 2) {
                lastItem = true
                binding.btnNext.setText(R.string.lets_go)
            }
        }

        binding.btnBack.setOnClickListener {
            viewPager.currentItem = viewPager.currentItem - 1
            lastItem = false
            binding.btnNext.setText(R.string.next)

            if (viewPager.currentItem == 0) {
                binding.btnBack.visibility = View.INVISIBLE
            }
        }
    }

    private fun configureWindow() {
        activity?.window?.statusBarColor = ResourcesCompat.getColor(resources, R.color.white, null)
        activity?.window?.let {
            val winController = WindowInsetsControllerCompat(it, binding.root)
            winController.isAppearanceLightStatusBars = false
        }
    }

    private fun navigateToLogin() {
        this.findNavController().navigate(
            OnboardFragmentDirections.actionOnboardFragmentToLoginFragment()
        )
    }
}

class OnboardAdapter(fragment: Fragment) : FragmentStateAdapter(fragment) {

    override fun getItemCount(): Int = 3

    override fun createFragment(position: Int): Fragment {
        // Return a NEW fragment instance in createFragment(int)
        val fragment = PageFragment(position)
        return fragment
    }
}

class PageFragment(
    private val pageNum: Int
) : Fragment() {

    private lateinit var binding: FragmentPageBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_page, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        configurePage()
    }

    private fun configurePage() {
        when(pageNum) {
            1 -> {
                binding.image.setImageResource(R.drawable.ic_onboard_1)
                binding.title.setText(R.string.onboard_title1)
                binding.description.setText(R.string.onboard_text1)
            }
            2 -> {
                binding.image.setImageResource(R.drawable.ic_onboard_2)
                binding.title.setText(R.string.onboard_title2)
                binding.description.setText(R.string.onboard_text2)
            }
            else -> {
                binding.image.setImageResource(R.drawable.ic_onboard_3)
                binding.title.setText(R.string.onboard_title3)
                binding.description.setText(R.string.onboard_text3)
            }
        }
    }

}